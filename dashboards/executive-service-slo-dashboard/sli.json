{
  "version": 16,
  "variables": [
    { "key": "Service", "type": "text", "visible": true },
    {
      "key": "App",
      "type": "query",
      "visible": true,
      "input": "fetch dt.entity.service\n| fields managementZones\n| expand managementZones\n| dedup managementZones",
      "multiple": false
    },
    {
      "key": "MZ_Override",
      "type": "csv",
      "visible": true,
      "input": "true,false",
      "multiple": false
    },
    { "key": "Endpoint", "type": "text", "visible": true },
    {
      "key": "SLI_Threshold",
      "type": "text",
      "visible": true,
      "defaultValue": "50"
    },
    {
      "key": "Target",
      "type": "text",
      "visible": true,
      "defaultValue": "99.0"
    },
    {
      "key": "Entrypoint",
      "type": "csv",
      "visible": true,
      "input": "true,false",
      "multiple": false
    },
    {
      "key": "Data",
      "type": "query",
      "visible": false,
      "input": "timeseries {min = min(dt.service.request.response_time),\nmax = max(dt.service.request.response_time),\navg = avg(dt.service.request.response_time),\nmedian = median(dt.service.request.response_time),\nperc75 = percentile(dt.service.request.response_time,75)\n,perc90 = percentile(dt.service.request.response_time,90)\n,perc95 = percentile(dt.service.request.response_time,95)\n,perc99 = percentile(dt.service.request.response_time,99)\n,total = sum(dt.service.request.count)\n,failures=sum(dt.service.request.failure_count)}\n// , interval:1m\n, by:{dt.entity.service,endpoint.name}\n, filter:{\n  if(toBoolean($MZ_Override), \n    if($Endpoint != \"\", \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and not(entityAttr(dt.entity.service, \"isExternalService\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else:\n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and not(entityAttr(dt.entity.service, \"isExternalService\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and in(entityAttr(dt.entity.service, \"managementZones\"), $App), \n      else: \n        in(entityAttr(dt.entity.service, \"managementZones\"), $App)\n      )\n    ), \n  else: \n    if($Endpoint != \"\", \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and not(entityAttr(dt.entity.service, \"isExternalService\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else: \n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and not(entityAttr(dt.entity.service, \"isExternalService\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(entityName(dt.entity.service), $Service), \n      else: \n        matchesPhrase(entityName(dt.entity.service), $Service)\n      )\n    )\n  )\n}\n| summarize min = avg(min[]), max = avg(max[]),\nmedian = avg(median[]), avg = avg(avg[]),\nperc75 = avg(perc75[]), perc90 = avg(perc90[]),\nperc95 = avg(perc95[]), perc99 = avg(perc99[]),\ntotal = sum(total[]), failures = sum(failures[])\n,by:{timeframe,interval}\n| summarize records = collectArray(record(\ntimeframe, interval, min, max, median, avg, perc75,\nperc90, perc95, perc99, total, failures\n))\n| fields string = encodeBase64(concat(\"{\\\"results\\\":\", tostring(arrayflatten(records)),\"}\"))",
      "multiple": true,
      "defaultValue": ["3420b2ac-f1cf-4b24-b62d-61ba1ba8ed05*"]
    },
    {
      "key": "MDA",
      "type": "query",
      "visible": false,
      "input": "data record(link=\"https://{{`{{TENANT}}`}}.apps.dynatrace.com/ui/apps/dynatrace.classic.mda/ui/services/{{`{{SERVICE_ID}}`}}/mda?metric={{`{{METRIC}}`}}&dimension=%7BRequest%3AName%7D&gtf={{`{{FROM}}`}}+to+{{`{{TO}}`}}\")\n| fields link = replaceString(link,\"{{`{{TENANT}}`}}\",$Tenant)",
      "multiple": false
    },
    {
      "key": "Tenant",
      "type": "query",
      "visible": false,
      "input": "fetch dt.system.events \n| fields dt.system.environment \n| limit 1",
      "multiple": false,
      "defaultValue": "guu84124"
    }
  ],
  "tiles": {
    "7": {
      "type": "data",
      "title": "Successful",
      "query": "timeseries total = sum(dt.service.request.count)\n,failures=sum(dt.service.request.failure_count)\n// , interval:1m\n, by:{dt.entity.service,endpoint.name}\n, filter:{\n  if(toBoolean($MZ_Override), \n    if(stringLength($Endpoint) > 0, \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        // and not(entityAttr(dt.entity.service, \"isExternalService\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else:\n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        // and not(entityAttr(dt.entity.service, \"isExternalService\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and in(entityAttr(dt.entity.service, \"managementZones\"), $App), \n      else: \n        in(entityAttr(dt.entity.service, \"managementZones\"), $App)\n      )\n    ), \n  else: \n    if(stringLength($Endpoint) > 0, \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        // and not(entityAttr(dt.entity.service, \"isExternalService\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else: \n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        // and not(entityAttr(dt.entity.service, \"isExternalService\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(entityName(dt.entity.service), $Service), \n      else: \n        matchesPhrase(entityName(dt.entity.service), $Service)\n      )\n    )\n  )\n}\n| summarize total = sum(total[]), failures = sum(failures[])\n,by:{timeframe,interval} \n| summarize good = sum(total[]-failures[]), by: { timeframe, interval}\n| fieldsAdd value = arraySum(good)",
      "davis": {
        "enabled": false,
        "davisVisualization": { "isAvailable": true }
      },
      "visualization": "singleValue",
      "visualizationSettings": {
        "thresholds": [],
        "chartSettings": {
          "xAxisScaling": "analyzedTimeframe",
          "gapPolicy": "gap",
          "circleChartSettings": {
            "groupingThresholdType": "relative",
            "groupingThresholdValue": 0,
            "valueType": "relative"
          },
          "categoryOverrides": {},
          "curve": "linear",
          "pointsDisplay": "auto",
          "categoricalBarChartSettings": {
            "layout": "horizontal",
            "categoryAxisTickLayout": "horizontal",
            "scale": "absolute",
            "groupMode": "stacked",
            "colorPaletteMode": "multi-color",
            "categoryAxis": ["interval", "value"],
            "categoryAxisLabel": "interval,value",
            "valueAxis": ["value"],
            "valueAxisLabel": "value",
            "tooltipVariant": "single"
          },
          "colorPalette": "categorical",
          "valueRepresentation": "absolute",
          "truncationMode": "middle",
          "xAxisLabel": "timeframe",
          "xAxisIsLabelVisible": false,
          "hiddenLegendFields": [],
          "fieldMapping": {
            "timestamp": "timeframe",
            "leftAxisValues": ["good"]
          },
          "leftYAxisSettings": {
            "isLabelVisible": true,
            "label": "Service request count"
          }
        },
        "singleValue": {
          "showLabel": false,
          "label": "Name",
          "prefixIcon": "",
          "recordField": "value",
          "autoscale": true,
          "alignment": "center",
          "trend": {
            "trendType": "auto",
            "isVisible": true,
            "isLabelVisible": false,
            "isRelative": true,
            "upward": {
              "Default": "var(--dt-colors-charts-categorical-color-09-default, #649438)"
            },
            "downward": {
              "Default": "var(--dt-colors-charts-loglevel-emergency-default, #ae132d)"
            }
          },
          "colorThresholdTarget": "value",
          "sparklineSettings": {
            "showTicks": true,
            "lineType": "linear",
            "variant": "line"
          }
        },
        "table": {
          "rowDensity": "condensed",
          "enableSparklines": false,
          "hiddenColumns": [],
          "linewrapEnabled": false,
          "lineWrapIds": [],
          "monospacedFontEnabled": false,
          "monospacedFontColumns": [],
          "columnWidths": {},
          "columnTypeOverrides": [
            { "fields": ["good"], "value": "sparkline", "id": 1736865813168 }
          ]
        },
        "honeycomb": {
          "shape": "hexagon",
          "legend": { "hidden": false, "position": "auto" },
          "displayedFields": [],
          "dataMappings": {},
          "truncationMode": "middle",
          "colorMode": "color-palette",
          "colorPalette": "blue"
        },
        "histogram": {
          "legend": "auto",
          "yAxis": { "label": "Frequency", "scale": "linear" },
          "colorPalette": "categorical",
          "dataMappings": [
            { "valueAxis": "interval", "rangeAxis": "" },
            { "valueAxis": "value", "rangeAxis": "" }
          ],
          "variant": "single",
          "truncationMode": "middle",
          "displayedFields": []
        },
        "autoSelectVisualization": false,
        "unitsOverrides": []
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      }
    },
    "11": {
      "type": "data",
      "title": "",
      "query": "timeseries {avg = avg(dt.service.request.response_time),\ntotal = sum(dt.service.request.count)\n,failures=sum(dt.service.request.failure_count)}\n, interval:1m\n, by:{dt.entity.service,endpoint.name}\n, filter:{\n  if(toBoolean($MZ_Override), \n    if(stringLength($Endpoint) > 0, \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        // and not(entityAttr(dt.entity.service, \"isExternalService\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else:\n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        // and not(entityAttr(dt.entity.service, \"isExternalService\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and in(entityAttr(dt.entity.service, \"managementZones\"), $App), \n      else: \n        in(entityAttr(dt.entity.service, \"managementZones\"), $App)\n      )\n    ), \n  else: \n    if(stringLength($Endpoint) > 0, \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        // and not(entityAttr(dt.entity.service, \"isExternalService\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else: \n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        // and not(entityAttr(dt.entity.service, \"isExternalService\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(entityName(dt.entity.service), $Service), \n      else: \n        matchesPhrase(entityName(dt.entity.service), $Service)\n      )\n    )\n  )\n}\n| summarize avg = avg(avg[]),total = sum(total[]), failures = sum(failures[])\n,by:{timeframe,interval} \n// | fields avg = arrayRemoveNulls(avg), total = arrayRemoveNulls(total), failures = arrayRemoveNulls(failures), timeframe, interval\n// Performance SLI\n| fieldsAdd high=iCollectArray(if(avg[]> (1000 * toDouble($SLI_Threshold)), avg[]))\n| fieldsAdd low=iCollectArray(if(avg[]<= (1000 * toDouble($SLI_Threshold)), avg[]))\n| fieldsAdd highRespTimes=iCollectArray(if(isNull(high[]),0,else:1))\n| fieldsAdd lowRespTimes=iCollectArray(if(isNull(low[]),0,else:1))\n| fieldsAdd performance_sli=100*(lowRespTimes[]/(lowRespTimes[]+highRespTimes[]))\n\n//Availability SLI\n| fieldsAdd availability_good = total[]-failures[]\n| fieldsAdd availability_sli=((availability_good[])/total[])*(100)\n| summarize status = avg((performance_sli[]+availability_sli[])/2),by:{interval, timeframe}\n| fields status = arrayRemoveNulls(status), interval, timeframe\n",
      "davis": {
        "enabled": false,
        "davisVisualization": { "isAvailable": true }
      },
      "visualization": "lineChart",
      "visualizationSettings": {
        "thresholds": [
          {
            "id": 1,
            "field": "value",
            "title": "Test",
            "isEnabled": true,
            "rules": [
              {
                "id": 0,
                "color": {
                  "Default": "var(--dt-colors-charts-categorical-color-13-default, #1c520a)"
                },
                "comparator": "≥",
                "label": "Good",
                "value": 99
              },
              {
                "id": 2,
                "color": {
                  "Default": "var(--dt-colors-charts-loglevel-emergency-default, #ae132d)"
                },
                "comparator": "≥",
                "label": "Bad",
                "value": 0
              }
            ]
          }
        ],
        "chartSettings": {
          "xAxisScaling": "analyzedTimeframe",
          "gapPolicy": "connect",
          "circleChartSettings": {
            "groupingThresholdType": "relative",
            "groupingThresholdValue": 0,
            "valueType": "relative"
          },
          "categoryOverrides": {},
          "curve": "linear",
          "pointsDisplay": "auto",
          "categoricalBarChartSettings": {
            "layout": "horizontal",
            "categoryAxisTickLayout": "horizontal",
            "scale": "absolute",
            "groupMode": "stacked",
            "colorPaletteMode": "multi-color",
            "categoryAxis": ["interval"],
            "categoryAxisLabel": "interval",
            "valueAxis": ["interval"],
            "valueAxisLabel": "interval",
            "tooltipVariant": "single"
          },
          "colorPalette": "categorical",
          "valueRepresentation": "absolute",
          "truncationMode": "middle",
          "xAxisLabel": "timeframe",
          "xAxisIsLabelVisible": false,
          "hiddenLegendFields": [],
          "leftYAxisSettings": {
            "isLabelVisible": false,
            "label": "Service request response time",
            "max": 105,
            "scale": "linear"
          },
          "legend": { "hidden": true },
          "tooltip": { "variant": "single" },
          "fieldMapping": {
            "timestamp": "timeframe",
            "leftAxisValues": ["status"]
          }
        },
        "singleValue": {
          "showLabel": false,
          "prefixIcon": "",
          "autoscale": true,
          "alignment": "center",
          "trend": { "trendType": "auto", "isVisible": true },
          "colorThresholdTarget": "background",
          "recordField": "value",
          "label": "dt.entity.service"
        },
        "table": {
          "rowDensity": "condensed",
          "enableSparklines": false,
          "hiddenColumns": [],
          "linewrapEnabled": false,
          "lineWrapIds": [],
          "monospacedFontEnabled": false,
          "monospacedFontColumns": [],
          "columnWidths": {},
          "columnTypeOverrides": [
            { "fields": ["status"], "value": "sparkline", "id": 1736865813403 }
          ]
        },
        "honeycomb": {
          "shape": "hexagon",
          "legend": { "hidden": false, "position": "auto" },
          "displayedFields": [],
          "dataMappings": {},
          "truncationMode": "middle",
          "colorMode": "color-palette",
          "colorPalette": "categorical"
        },
        "histogram": {
          "legend": "auto",
          "yAxis": { "label": "Frequency", "scale": "linear" },
          "colorPalette": "categorical",
          "dataMappings": [{ "valueAxis": "interval", "rangeAxis": "" }],
          "variant": "single",
          "truncationMode": "middle",
          "displayedFields": []
        },
        "autoSelectVisualization": false,
        "recordView": { "fieldsWidth": 203.49 }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      }
    },
    "14": {
      "type": "data",
      "title": "Average ALL",
      "query": "timeseries min = min(dt.service.request.response_time),\nmax = max(dt.service.request.response_time),\navg = avg(dt.service.request.response_time),\nmedian = median(dt.service.request.response_time),\nperc75 = percentile(dt.service.request.response_time,75)\n,perc90 = percentile(dt.service.request.response_time,90)\n,perc95 = percentile(dt.service.request.response_time,95)\n,perc99 = percentile(dt.service.request.response_time,99)\n, by:{dt.entity.service,endpoint.name}\n, filter:{\n  if(toBoolean($MZ_Override), \n    if(stringLength($Endpoint) > 0, \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else:\n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and in(entityAttr(dt.entity.service, \"managementZones\"), $App), \n      else: \n        in(entityAttr(dt.entity.service, \"managementZones\"), $App)\n      )\n    ), \n  else: \n    if(stringLength($Endpoint) > 0, \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else: \n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(entityName(dt.entity.service), $Service), \n      else: \n        matchesPhrase(entityName(dt.entity.service), $Service)\n      )\n    )\n  )\n}\n| summarize avg = avg(avg[]), max = avg(max[]),\nmin = avg(min[]), median = avg(median[]),\nperc75 = avg(perc75[]), perc90 = avg(perc90[]),\nperc95 = avg(perc95[]), perc99 = avg(perc99[])\n, by: { timeframe, interval}\n| fieldsAdd metric1 = (min[] + max[])/2\n| fieldsAdd metric2 = (perc75[] + perc90[] + perc95[] + perc99[])/4\n| fieldsAdd metric3 = (avg[] + median[])/2\n| fieldsAdd metric = (metric1[] + metric2[] + metric3[])/3\n| fields metric, interval, timeframe, value = arrayAvg(metric)\n// | summarize metric = avg(metric), by:{timeframe,interval}\n// | fieldsAdd value = arrayAvg(metric)",
      "davis": {
        "enabled": false,
        "davisVisualization": { "isAvailable": true }
      },
      "visualization": "singleValue",
      "visualizationSettings": {
        "thresholds": [],
        "chartSettings": {
          "xAxisScaling": "analyzedTimeframe",
          "gapPolicy": "gap",
          "circleChartSettings": {
            "groupingThresholdType": "relative",
            "groupingThresholdValue": 0,
            "valueType": "relative"
          },
          "categoryOverrides": {},
          "curve": "linear",
          "pointsDisplay": "auto",
          "categoricalBarChartSettings": {
            "layout": "horizontal",
            "categoryAxisTickLayout": "horizontal",
            "scale": "absolute",
            "groupMode": "stacked",
            "colorPaletteMode": "multi-color",
            "categoryAxis": ["interval", "value"],
            "categoryAxisLabel": "interval,value",
            "valueAxis": ["value"],
            "valueAxisLabel": "value",
            "tooltipVariant": "single"
          },
          "colorPalette": "categorical",
          "valueRepresentation": "absolute",
          "truncationMode": "middle",
          "xAxisLabel": "timeframe",
          "xAxisIsLabelVisible": false,
          "hiddenLegendFields": [],
          "fieldMapping": {
            "timestamp": "timeframe",
            "leftAxisValues": ["metric"]
          },
          "leftYAxisSettings": {
            "isLabelVisible": true,
            "label": "Service request count"
          }
        },
        "singleValue": {
          "showLabel": false,
          "label": "Name",
          "prefixIcon": "",
          "recordField": "value",
          "autoscale": true,
          "alignment": "center",
          "trend": {
            "trendType": "auto",
            "isVisible": true,
            "isLabelVisible": false,
            "isRelative": true,
            "downward": {
              "Default": "var(--dt-colors-charts-apdex-good-default, #1c520a)"
            },
            "upward": {
              "Default": "var(--dt-colors-charts-loglevel-emergency-default, #ae132d)"
            }
          },
          "colorThresholdTarget": "value",
          "sparklineSettings": {
            "showTicks": true,
            "lineType": "linear",
            "variant": "line"
          }
        },
        "table": {
          "rowDensity": "condensed",
          "enableSparklines": false,
          "hiddenColumns": [],
          "linewrapEnabled": false,
          "lineWrapIds": [],
          "monospacedFontEnabled": false,
          "monospacedFontColumns": [],
          "columnWidths": {},
          "columnTypeOverrides": [
            { "fields": ["metric"], "value": "sparkline", "id": 1736865813201 }
          ]
        },
        "honeycomb": {
          "shape": "hexagon",
          "legend": { "hidden": false, "position": "auto" },
          "displayedFields": [],
          "dataMappings": {},
          "truncationMode": "middle",
          "colorMode": "color-palette",
          "colorPalette": "categorical"
        },
        "histogram": {
          "legend": "auto",
          "yAxis": { "label": "Frequency", "scale": "linear" },
          "colorPalette": "categorical",
          "dataMappings": [
            { "valueAxis": "interval", "rangeAxis": "" },
            { "valueAxis": "value", "rangeAxis": "" }
          ],
          "variant": "single",
          "truncationMode": "middle",
          "displayedFields": []
        },
        "autoSelectVisualization": false,
        "unitsOverrides": [
          {
            "identifier": "metric",
            "unitCategory": "time",
            "baseUnit": "microsecond",
            "displayUnit": null,
            "decimals": 2,
            "suffix": "",
            "delimiter": false,
            "added": 1733941491874
          },
          {
            "identifier": "value",
            "unitCategory": "time",
            "baseUnit": "microsecond",
            "displayUnit": null,
            "decimals": 2,
            "suffix": "",
            "delimiter": false,
            "added": 1733941499055
          }
        ],
        "recordView": { "fieldsWidth": 242.76 }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      }
    },
    "15": {
      "type": "data",
      "title": "Average of 75, 90, 95, 99",
      "query": "timeseries perc75 = percentile(dt.service.request.response_time,75)\n,perc90 = percentile(dt.service.request.response_time,90)\n,perc95 = percentile(dt.service.request.response_time,95)\n,perc99 = percentile(dt.service.request.response_time,99)\n, by:{dt.entity.service,endpoint.name}\n, filter:{\n  if(toBoolean($MZ_Override), \n    if(stringLength($Endpoint) > 0, \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and not(entityAttr(dt.entity.service, \"isExternalService\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else:\n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and not(entityAttr(dt.entity.service, \"isExternalService\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and in(entityAttr(dt.entity.service, \"managementZones\"), $App), \n      else: \n        in(entityAttr(dt.entity.service, \"managementZones\"), $App)\n      )\n    ), \n  else: \n    if(stringLength($Endpoint) > 0, \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and not(entityAttr(dt.entity.service, \"isExternalService\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else: \n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and not(entityAttr(dt.entity.service, \"isExternalService\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(entityName(dt.entity.service), $Service), \n      else: \n        matchesPhrase(entityName(dt.entity.service), $Service)\n      )\n    )\n  )\n}\n| summarize perc75 = avg(perc75[]), perc90 = avg(perc90[]),\nperc95 = avg(perc95[]), perc99 = avg(perc99[])\n, by: { timeframe, interval}\n| fieldsAdd metric = (perc75[] + perc90[] + perc95[] + perc99[])/4\n| summarize metric = avg(metric[]), by:{timeframe,interval}\n| fieldsAdd value = arrayAvg(metric)",
      "davis": {
        "enabled": false,
        "davisVisualization": { "isAvailable": true }
      },
      "visualization": "singleValue",
      "visualizationSettings": {
        "thresholds": [],
        "chartSettings": {
          "xAxisScaling": "analyzedTimeframe",
          "gapPolicy": "gap",
          "circleChartSettings": {
            "groupingThresholdType": "relative",
            "groupingThresholdValue": 0,
            "valueType": "relative"
          },
          "categoryOverrides": {},
          "curve": "linear",
          "pointsDisplay": "auto",
          "categoricalBarChartSettings": {
            "layout": "horizontal",
            "categoryAxisTickLayout": "horizontal",
            "scale": "absolute",
            "groupMode": "stacked",
            "colorPaletteMode": "multi-color",
            "categoryAxis": ["interval", "value"],
            "categoryAxisLabel": "interval,value",
            "valueAxis": ["value"],
            "valueAxisLabel": "value",
            "tooltipVariant": "single"
          },
          "colorPalette": "categorical",
          "valueRepresentation": "absolute",
          "truncationMode": "middle",
          "xAxisLabel": "timeframe",
          "xAxisIsLabelVisible": false,
          "hiddenLegendFields": [],
          "fieldMapping": {
            "timestamp": "timeframe",
            "leftAxisValues": ["metric"]
          },
          "leftYAxisSettings": {
            "isLabelVisible": true,
            "label": "Service request count"
          }
        },
        "singleValue": {
          "showLabel": false,
          "label": "Name",
          "prefixIcon": "",
          "recordField": "value",
          "autoscale": true,
          "alignment": "center",
          "trend": {
            "trendType": "auto",
            "isVisible": true,
            "isLabelVisible": false,
            "isRelative": true,
            "downward": {
              "Default": "var(--dt-colors-charts-apdex-good-default, #1c520a)"
            },
            "upward": {
              "Default": "var(--dt-colors-charts-loglevel-emergency-default, #ae132d)"
            }
          },
          "colorThresholdTarget": "value",
          "sparklineSettings": {
            "showTicks": true,
            "lineType": "linear",
            "variant": "line"
          }
        },
        "table": {
          "rowDensity": "condensed",
          "enableSparklines": false,
          "hiddenColumns": [],
          "linewrapEnabled": false,
          "lineWrapIds": [],
          "monospacedFontEnabled": false,
          "monospacedFontColumns": [],
          "columnWidths": {},
          "columnTypeOverrides": [
            { "fields": ["metric"], "value": "sparkline", "id": 1736865813235 }
          ]
        },
        "honeycomb": {
          "shape": "hexagon",
          "legend": { "hidden": false, "position": "auto" },
          "displayedFields": [],
          "dataMappings": {},
          "truncationMode": "middle",
          "colorMode": "color-palette",
          "colorPalette": "blue"
        },
        "histogram": {
          "legend": "auto",
          "yAxis": { "label": "Frequency", "scale": "linear" },
          "colorPalette": "categorical",
          "dataMappings": [
            { "valueAxis": "interval", "rangeAxis": "" },
            { "valueAxis": "value", "rangeAxis": "" }
          ],
          "variant": "single",
          "truncationMode": "middle",
          "displayedFields": []
        },
        "autoSelectVisualization": false,
        "unitsOverrides": [
          {
            "identifier": "metric",
            "unitCategory": "time",
            "baseUnit": "microsecond",
            "displayUnit": null,
            "decimals": 2,
            "suffix": "",
            "delimiter": false,
            "added": 1733941491874
          },
          {
            "identifier": "value",
            "unitCategory": "time",
            "baseUnit": "microsecond",
            "displayUnit": null,
            "decimals": 2,
            "suffix": "",
            "delimiter": false,
            "added": 1733941499055
          }
        ]
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      }
    },
    "16": {
      "type": "data",
      "title": "Average of Min,Max",
      "query": "timeseries min = min(dt.service.request.response_time),\nmax = max(dt.service.request.response_time)\n, by:{dt.entity.service,endpoint.name}\n, filter:{\n  if(toBoolean($MZ_Override), \n    if(stringLength($Endpoint) > 0, \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else:\n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"),\"RMI_SERVICE\", \"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and in(entityAttr(dt.entity.service, \"managementZones\"), $App), \n      else: \n        in(entityAttr(dt.entity.service, \"managementZones\"), $App)\n      )\n    ), \n  else: \n    if(stringLength($Endpoint) > 0, \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else: \n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(entityName(dt.entity.service), $Service), \n      else: \n        matchesPhrase(entityName(dt.entity.service), $Service)\n      )\n    )\n  )\n}\n| summarize  max = avg(max[]),min = avg(min[])\n, by: { timeframe, interval}\n| fieldsAdd metric = (min[] + max[])/2\n| summarize metric = avg(metric[]), by:{timeframe,interval}\n| fieldsAdd value = arrayAvg(metric)",
      "davis": {
        "enabled": false,
        "davisVisualization": { "isAvailable": true }
      },
      "visualization": "singleValue",
      "visualizationSettings": {
        "thresholds": [],
        "chartSettings": {
          "xAxisScaling": "analyzedTimeframe",
          "gapPolicy": "gap",
          "circleChartSettings": {
            "groupingThresholdType": "relative",
            "groupingThresholdValue": 0,
            "valueType": "relative"
          },
          "categoryOverrides": {},
          "curve": "linear",
          "pointsDisplay": "auto",
          "categoricalBarChartSettings": {
            "layout": "horizontal",
            "categoryAxisTickLayout": "horizontal",
            "scale": "absolute",
            "groupMode": "stacked",
            "colorPaletteMode": "multi-color",
            "categoryAxis": ["interval", "value"],
            "categoryAxisLabel": "interval,value",
            "valueAxis": ["value"],
            "valueAxisLabel": "value",
            "tooltipVariant": "single"
          },
          "colorPalette": "categorical",
          "valueRepresentation": "absolute",
          "truncationMode": "middle",
          "xAxisLabel": "timeframe",
          "xAxisIsLabelVisible": false,
          "hiddenLegendFields": [],
          "fieldMapping": {
            "timestamp": "timeframe",
            "leftAxisValues": ["metric"]
          },
          "leftYAxisSettings": {
            "isLabelVisible": true,
            "label": "Service request count"
          }
        },
        "singleValue": {
          "showLabel": false,
          "label": "Name",
          "prefixIcon": "",
          "recordField": "value",
          "autoscale": true,
          "alignment": "center",
          "trend": {
            "trendType": "auto",
            "isVisible": true,
            "isLabelVisible": false,
            "isRelative": true,
            "downward": {
              "Default": "var(--dt-colors-charts-apdex-good-default, #1c520a)"
            },
            "upward": {
              "Default": "var(--dt-colors-charts-loglevel-emergency-default, #ae132d)"
            }
          },
          "colorThresholdTarget": "value",
          "sparklineSettings": {
            "showTicks": true,
            "lineType": "linear",
            "variant": "line"
          }
        },
        "table": {
          "rowDensity": "condensed",
          "enableSparklines": false,
          "hiddenColumns": [],
          "linewrapEnabled": false,
          "lineWrapIds": [],
          "monospacedFontEnabled": false,
          "monospacedFontColumns": [],
          "columnWidths": {},
          "columnTypeOverrides": [
            { "fields": ["metric"], "value": "sparkline", "id": 1736865813517 }
          ]
        },
        "honeycomb": {
          "shape": "hexagon",
          "legend": { "hidden": false, "position": "auto" },
          "displayedFields": [],
          "dataMappings": {},
          "truncationMode": "middle",
          "colorMode": "color-palette",
          "colorPalette": "blue"
        },
        "histogram": {
          "legend": "auto",
          "yAxis": { "label": "Frequency", "scale": "linear" },
          "colorPalette": "categorical",
          "dataMappings": [
            { "valueAxis": "interval", "rangeAxis": "" },
            { "valueAxis": "value", "rangeAxis": "" }
          ],
          "variant": "single",
          "truncationMode": "middle",
          "displayedFields": []
        },
        "autoSelectVisualization": false,
        "unitsOverrides": [
          {
            "identifier": "metric",
            "unitCategory": "time",
            "baseUnit": "microsecond",
            "displayUnit": null,
            "decimals": 2,
            "suffix": "",
            "delimiter": false,
            "added": 1733941491874
          },
          {
            "identifier": "value",
            "unitCategory": "time",
            "baseUnit": "microsecond",
            "displayUnit": null,
            "decimals": 2,
            "suffix": "",
            "delimiter": false,
            "added": 1733941499055
          }
        ]
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      }
    },
    "17": {
      "type": "data",
      "title": "Average of AVG/Median",
      "query": "timeseries avg = avg(dt.service.request.response_time),\nmedian = median(dt.service.request.response_time)\n, by:{dt.entity.service,endpoint.name}\n, filter:{\n  if(toBoolean($MZ_Override), \n    if(stringLength($Endpoint) > 0,\n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else:\n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and in(entityAttr(dt.entity.service, \"managementZones\"), $App), \n      else: \n        in(entityAttr(dt.entity.service, \"managementZones\"), $App)\n      )\n    ), \n  else: \n    if(stringLength($Endpoint) > 0, \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else: \n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(entityName(dt.entity.service), $Service), \n      else: \n        matchesPhrase(entityName(dt.entity.service), $Service)\n      )\n    )\n  )\n}\n| summarize avg = avg(avg[]), median = avg(median[])\n, by: { timeframe, interval} \n| fieldsAdd metric = (avg[] + median[])/2\n| summarize metric = avg(metric[]), by:{timeframe,interval}\n| fieldsAdd value = arrayAvg(metric)",
      "davis": {
        "enabled": false,
        "davisVisualization": { "isAvailable": true }
      },
      "visualization": "singleValue",
      "visualizationSettings": {
        "thresholds": [],
        "chartSettings": {
          "xAxisScaling": "analyzedTimeframe",
          "gapPolicy": "gap",
          "circleChartSettings": {
            "groupingThresholdType": "relative",
            "groupingThresholdValue": 0,
            "valueType": "relative"
          },
          "categoryOverrides": {},
          "curve": "linear",
          "pointsDisplay": "auto",
          "categoricalBarChartSettings": {
            "layout": "horizontal",
            "categoryAxisTickLayout": "horizontal",
            "scale": "absolute",
            "groupMode": "stacked",
            "colorPaletteMode": "multi-color",
            "categoryAxis": ["interval", "value"],
            "categoryAxisLabel": "interval,value",
            "valueAxis": ["value"],
            "valueAxisLabel": "value",
            "tooltipVariant": "single"
          },
          "colorPalette": "categorical",
          "valueRepresentation": "absolute",
          "truncationMode": "middle",
          "xAxisLabel": "timeframe",
          "xAxisIsLabelVisible": false,
          "hiddenLegendFields": [],
          "fieldMapping": {
            "timestamp": "timeframe",
            "leftAxisValues": ["metric"]
          },
          "leftYAxisSettings": {
            "isLabelVisible": true,
            "label": "Service request count"
          }
        },
        "singleValue": {
          "showLabel": false,
          "label": "Name",
          "prefixIcon": "",
          "recordField": "value",
          "autoscale": true,
          "alignment": "center",
          "trend": {
            "trendType": "auto",
            "isVisible": true,
            "isLabelVisible": false,
            "isRelative": true,
            "downward": {
              "Default": "var(--dt-colors-charts-apdex-good-default, #1c520a)"
            },
            "upward": {
              "Default": "var(--dt-colors-charts-loglevel-emergency-default, #ae132d)"
            }
          },
          "colorThresholdTarget": "value",
          "sparklineSettings": {
            "showTicks": true,
            "lineType": "linear",
            "variant": "line"
          }
        },
        "table": {
          "rowDensity": "condensed",
          "enableSparklines": false,
          "hiddenColumns": [],
          "linewrapEnabled": false,
          "lineWrapIds": [],
          "monospacedFontEnabled": false,
          "monospacedFontColumns": [],
          "columnWidths": {},
          "columnTypeOverrides": [
            { "fields": ["metric"], "value": "sparkline", "id": 1736865812886 }
          ]
        },
        "honeycomb": {
          "shape": "hexagon",
          "legend": { "hidden": false, "position": "auto" },
          "displayedFields": [],
          "dataMappings": {},
          "truncationMode": "middle",
          "colorMode": "color-palette",
          "colorPalette": "blue"
        },
        "histogram": {
          "legend": "auto",
          "yAxis": { "label": "Frequency", "scale": "linear" },
          "colorPalette": "categorical",
          "dataMappings": [
            { "valueAxis": "interval", "rangeAxis": "" },
            { "valueAxis": "value", "rangeAxis": "" }
          ],
          "variant": "single",
          "truncationMode": "middle",
          "displayedFields": []
        },
        "autoSelectVisualization": false,
        "unitsOverrides": [
          {
            "identifier": "metric",
            "unitCategory": "time",
            "baseUnit": "microsecond",
            "displayUnit": null,
            "decimals": 2,
            "suffix": "",
            "delimiter": false,
            "added": 1733941491874
          },
          {
            "identifier": "value",
            "unitCategory": "time",
            "baseUnit": "microsecond",
            "displayUnit": null,
            "decimals": 2,
            "suffix": "",
            "delimiter": false,
            "added": 1733941499055
          }
        ]
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      }
    },
    "18": {
      "type": "data",
      "title": "Failed",
      "query": "timeseries total = sum(dt.service.request.count)\n,failures=sum(dt.service.request.failure_count)\n// , interval:1m\n, by:{dt.entity.service,endpoint.name}\n, filter:{\n  if(toBoolean($MZ_Override), \n    if(stringLength($Endpoint) > 0, \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else:\n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and in(entityAttr(dt.entity.service, \"managementZones\"), $App), \n      else: \n        in(entityAttr(dt.entity.service, \"managementZones\"), $App)\n      )\n    ), \n  else: \n    if(stringLength($Endpoint) > 0, \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else: \n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(entityName(dt.entity.service), $Service), \n      else: \n        matchesPhrase(entityName(dt.entity.service), $Service)\n      )\n    )\n  )\n}\n| summarize total = sum(total[]), failures = sum(failures[])\n,by:{timeframe,interval} \n| summarize failures = sum(failures[]), by: { timeframe, interval}\n| fieldsAdd value = arraySum(failures)",
      "davis": {
        "enabled": false,
        "davisVisualization": { "isAvailable": true }
      },
      "visualization": "singleValue",
      "visualizationSettings": {
        "thresholds": [],
        "chartSettings": {
          "xAxisScaling": "analyzedTimeframe",
          "gapPolicy": "gap",
          "circleChartSettings": {
            "groupingThresholdType": "relative",
            "groupingThresholdValue": 0,
            "valueType": "relative"
          },
          "categoryOverrides": {},
          "curve": "linear",
          "pointsDisplay": "auto",
          "categoricalBarChartSettings": {
            "layout": "horizontal",
            "categoryAxisTickLayout": "horizontal",
            "scale": "absolute",
            "groupMode": "stacked",
            "colorPaletteMode": "multi-color",
            "categoryAxis": ["interval", "value"],
            "categoryAxisLabel": "interval,value",
            "valueAxis": ["value"],
            "valueAxisLabel": "value",
            "tooltipVariant": "single"
          },
          "colorPalette": "categorical",
          "valueRepresentation": "absolute",
          "truncationMode": "middle",
          "xAxisLabel": "timeframe",
          "xAxisIsLabelVisible": false,
          "hiddenLegendFields": [],
          "fieldMapping": {
            "timestamp": "timeframe",
            "leftAxisValues": ["failures"]
          },
          "leftYAxisSettings": {
            "isLabelVisible": true,
            "label": "Service request count"
          }
        },
        "singleValue": {
          "showLabel": false,
          "label": "Name",
          "prefixIcon": "",
          "recordField": "value",
          "autoscale": true,
          "alignment": "center",
          "trend": {
            "trendType": "auto",
            "isVisible": true,
            "isLabelVisible": false,
            "isRelative": true,
            "upward": {
              "Default": "var(--dt-colors-charts-loglevel-emergency-default, #ae132d)"
            },
            "downward": {
              "Default": "var(--dt-colors-charts-apdex-good-default, #1c520a)"
            }
          },
          "colorThresholdTarget": "value",
          "sparklineSettings": {
            "showTicks": true,
            "lineType": "linear",
            "variant": "line"
          }
        },
        "table": {
          "rowDensity": "condensed",
          "enableSparklines": false,
          "hiddenColumns": [],
          "linewrapEnabled": false,
          "lineWrapIds": [],
          "monospacedFontEnabled": false,
          "monospacedFontColumns": [],
          "columnWidths": {},
          "columnTypeOverrides": [
            {
              "fields": ["failures"],
              "value": "sparkline",
              "id": 1736865813148
            }
          ]
        },
        "honeycomb": {
          "shape": "hexagon",
          "legend": { "hidden": false, "position": "auto" },
          "displayedFields": [],
          "dataMappings": {},
          "truncationMode": "middle",
          "colorMode": "color-palette",
          "colorPalette": "blue"
        },
        "histogram": {
          "legend": "auto",
          "yAxis": { "label": "Frequency", "scale": "linear" },
          "colorPalette": "categorical",
          "dataMappings": [
            { "valueAxis": "interval", "rangeAxis": "" },
            { "valueAxis": "value", "rangeAxis": "" }
          ],
          "variant": "single",
          "truncationMode": "middle",
          "displayedFields": []
        },
        "autoSelectVisualization": false,
        "unitsOverrides": []
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      }
    },
    "21": {
      "type": "data",
      "title": "Performance Insights by Endpoint",
      "query": "timeseries avg = avg(dt.service.request.response_time),\nmedian = median(dt.service.request.response_time)\n, by:{endpoint.name,dt.entity.service}\n, interval:1m\n, filter: {if(toBoolean($MZ_Override), \n    if(stringLength($Endpoint) > 0, \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\"))  \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else:\n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and in(entityAttr(dt.entity.service, \"managementZones\"), $App), \n      else: \n        in(entityAttr(dt.entity.service, \"managementZones\"), $App)\n      )\n    ), \n  else: \n    if(stringLength($Endpoint) > 0, \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else: \n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(entityName(dt.entity.service), $Service), \n      else: \n        matchesPhrase(entityName(dt.entity.service), $Service)\n      )\n    )\n  )}\n| summarize avg = avg(avg[]),by:{endpoint.name,dt.entity.service}\n| fields avg = arrayRemoveNulls(avg), endpoint.name,dt.entity.service\n// Performance SLI\n| fieldsAdd high=iCollectArray(if(avg[]> (1000 * toDouble($SLI_Threshold)), avg[]))\n| fieldsAdd low=iCollectArray(if(avg[]<= (1000 * toDouble($SLI_Threshold)), avg[]))\n| fieldsAdd highRespTimes=iCollectArray(if(isNull(high[]),0,else:1))\n| fieldsAdd lowRespTimes=iCollectArray(if(isNull(low[]),0,else:1))\n| fieldsAdd performance_sli = 100*(lowRespTimes[]/(lowRespTimes[]+highRespTimes[]))\n\n\n| fieldsAdd Error_budget = (1 - (toDouble($Target)/100))\n| fieldsAdd perf_rate_consumed = (1 - (arrayAvg(performance_sli)/100))\n| fieldsAdd threshold = if(arrayAvg(performance_sli) >= toDouble($Target),1,else:0)\n| fields `Endpoint` = endpoint.name,\n`Perf SLO` = arrayAvg(performance_sli), `Perf Budget` = (Error_budget - perf_rate_consumed) * 100,\n`AVG` = arrayAvg(avg), dt.entity.service, threshold\n| fieldsAdd link = concat(\"[mda]\",\"(\",$MDA,\")\")\n| fieldsAdd link = replaceString(link,\"{{`{{SERVICE_ID}}`}}\",dt.entity.service)\n| fieldsAdd link = replaceString(link,\"{{`{{METRIC}}`}}\",\"RESPONSE_TIME\")\n| fieldsAdd link = replaceString(link,\"{{`{{FROM}}`}}\",toString($dt_timeframe_from))\n| fieldsAdd link = replaceString(link,\"{{`{{TO}}`}}\",toString($dt_timeframe_to))\n| sort `Perf SLO` asc",
      "davis": {
        "enabled": false,
        "davisVisualization": { "isAvailable": true }
      },
      "visualization": "table",
      "visualizationSettings": {
        "thresholds": [
          {
            "id": 3,
            "field": "threshold",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 0,
                "color": {
                  "Default": "var(--dt-colors-charts-status-ideal-default, #2f6863)"
                },
                "comparator": "=",
                "label": "",
                "value": 1
              },
              {
                "id": 1,
                "color": {
                  "Default": "var(--dt-colors-charts-loglevel-emergency-default, #ae132d)"
                },
                "comparator": "=",
                "label": "",
                "value": 0
              }
            ]
          },
          {
            "id": 5,
            "field": "Perf Budget",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 0,
                "color": {
                  "Default": "var(--dt-colors-charts-status-ideal-default, #2f6863)"
                },
                "comparator": "≥",
                "label": "",
                "value": 0.1
              },
              {
                "id": 1,
                "color": {
                  "Default": "var(--dt-colors-charts-status-warning-default, #eca440)"
                },
                "comparator": ">",
                "label": "",
                "value": 0
              },
              {
                "id": 2,
                "color": {
                  "Default": "var(--dt-colors-charts-status-critical-default, #c4233b)"
                },
                "comparator": "<",
                "label": "",
                "value": 0
              }
            ]
          }
        ],
        "chartSettings": {
          "xAxisScaling": "analyzedTimeframe",
          "gapPolicy": "gap",
          "circleChartSettings": {
            "groupingThresholdType": "relative",
            "groupingThresholdValue": 0,
            "valueType": "relative"
          },
          "categoryOverrides": {},
          "curve": "linear",
          "pointsDisplay": "auto",
          "categoricalBarChartSettings": {
            "layout": "horizontal",
            "categoryAxisTickLayout": "horizontal",
            "scale": "absolute",
            "groupMode": "stacked",
            "colorPaletteMode": "multi-color",
            "categoryAxis": ["Endpoint", "dt.entity.service", "link"],
            "categoryAxisLabel": "Endpoint,dt.entity.service,link",
            "valueAxis": ["Perf SLO", "Perf Budget", "AVG", "threshold"],
            "valueAxisLabel": "Perf SLO,Perf Budget,AVG,threshold",
            "tooltipVariant": "single"
          },
          "colorPalette": "categorical",
          "valueRepresentation": "absolute",
          "truncationMode": "middle",
          "xAxisLabel": "timeframe",
          "xAxisIsLabelVisible": false,
          "hiddenLegendFields": [],
          "leftYAxisSettings": {
            "isLabelVisible": true,
            "label": "Service request count"
          }
        },
        "singleValue": {
          "showLabel": false,
          "label": "Name",
          "prefixIcon": "",
          "recordField": "value",
          "autoscale": true,
          "alignment": "center",
          "trend": {
            "trendType": "auto",
            "isVisible": true,
            "isLabelVisible": false,
            "isRelative": true,
            "downward": {
              "Default": "var(--dt-colors-charts-apdex-good-default, #1c520a)"
            },
            "upward": {
              "Default": "var(--dt-colors-charts-loglevel-emergency-default, #ae132d)"
            }
          },
          "colorThresholdTarget": "value",
          "sparklineSettings": {
            "showTicks": true,
            "lineType": "linear",
            "variant": "line"
          }
        },
        "table": {
          "rowDensity": "condensed",
          "enableSparklines": false,
          "hiddenColumns": [["threshold"]],
          "linewrapEnabled": false,
          "lineWrapIds": [
            ["Endpoint"],
            ["Perf SLO"],
            ["Perf Budget"],
            ["AVG"],
            ["dt.entity.service"]
          ],
          "monospacedFontEnabled": false,
          "monospacedFontColumns": [],
          "columnWidths": {
            "[\"entity.name\"]": 190.08593750000003,
            "[\"endpoint.name\"]": 300.4583435058594,
            "[\"Endpoint\"]": 175.58334350585938
          },
          "columnTypeOverrides": [
            { "id": 1089317, "fields": ["link"], "value": "markdown" }
          ],
          "enableThresholdInRow": true,
          "sortBy": { "columnId": "[\"Perf SLO\"]", "direction": "ascending" },
          "colorThresholdTarget": "background",
          "selectedColumnForRowThreshold": "threshold"
        },
        "honeycomb": {
          "shape": "hexagon",
          "legend": { "hidden": false, "position": "auto" },
          "displayedFields": ["Endpoint", "dt.entity.service", "link"],
          "dataMappings": { "value": "Perf SLO" },
          "truncationMode": "middle",
          "colorMode": "color-palette",
          "colorPalette": "blue"
        },
        "histogram": {
          "legend": "auto",
          "yAxis": { "label": "Frequency", "scale": "linear" },
          "colorPalette": "categorical",
          "dataMappings": [
            { "valueAxis": "Perf SLO", "rangeAxis": "" },
            { "valueAxis": "Perf Budget", "rangeAxis": "" },
            { "valueAxis": "AVG", "rangeAxis": "" },
            { "valueAxis": "threshold", "rangeAxis": "" }
          ],
          "variant": "single",
          "truncationMode": "middle",
          "displayedFields": ["Endpoint", "dt.entity.service", "link"]
        },
        "autoSelectVisualization": false,
        "unitsOverrides": [
          {
            "identifier": "AVG",
            "unitCategory": "time",
            "baseUnit": "microsecond",
            "displayUnit": null,
            "decimals": 2,
            "suffix": "",
            "delimiter": false,
            "added": 1734017015396
          }
        ],
        "recordView": { "fieldsWidth": 200.67 }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      }
    },
    "22": {
      "type": "data",
      "title": "Availability Insights by Endpoint",
      "query": "timeseries \ntotal = sum(dt.service.request.count)\n,failures=sum(dt.service.request.failure_count)\n, interval:1m\n, by:{dt.entity.service,endpoint.name}\n, filter:{\n  if(toBoolean($MZ_Override), \n    if(stringLength($Endpoint) > 0, \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else:\n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and in(entityAttr(dt.entity.service, \"managementZones\"), $App), \n      else: \n        in(entityAttr(dt.entity.service, \"managementZones\"), $App)\n      )\n    ), \n  else: \n    if(stringLength($Endpoint) > 0, \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else: \n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(entityName(dt.entity.service), $Service), \n      else: \n        matchesPhrase(entityName(dt.entity.service), $Service)\n      )\n    )\n  )\n}\n| summarize total = sum(total[]), failures = sum(failures[])\n,by:{timeframe,interval,dt.entity.service,endpoint.name} \n\n//Availability SLI\n| fieldsAdd availability_good = total[]-failures[]\n| fieldsAdd availability_sli=((availability_good[])/total[])*(100)\n\n\n| fieldsAdd Error_budget = (1 - (toDouble($Target)/100))\n| fieldsAdd avail_rate_consumed = (1 - (arrayAvg(availability_sli)/100))\n| fieldsAdd threshold = if(arrayAvg(availability_sli) >= toDouble($Target),1,else:0)\n| fields `Endpoint` = endpoint.name,\n`Avail SLO` = arrayAvg(availability_sli), `Avail Budget` = (Error_budget - avail_rate_consumed) * 100,\n`Successful Requests` = arraySum(availability_good), `Failed Requests` = arraySum(failures), dt.entity.service, threshold\n| fieldsAdd link = concat(\"[mda]\",\"(\",$MDA,\")\")\n| fieldsAdd link = replaceString(link,\"{{`{{SERVICE_ID}}`}}\",dt.entity.service)\n| fieldsAdd link = replaceString(link,\"{{`{{METRIC}}`}}\",\"FAILURE_RATE\")\n| fieldsAdd link = replaceString(link,\"{{`{{FROM}}`}}\",toString($dt_timeframe_from))\n| fieldsAdd link = replaceString(link,\"{{`{{TO}}`}}\",toString($dt_timeframe_to))\n| sort `Avail SLO` asc\n",
      "davis": {
        "enabled": false,
        "davisVisualization": { "isAvailable": true }
      },
      "visualization": "table",
      "visualizationSettings": {
        "thresholds": [
          {
            "id": 4,
            "field": "threshold",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 0,
                "color": {
                  "Default": "var(--dt-colors-charts-status-ideal-default, #2f6863)"
                },
                "comparator": "=",
                "label": "",
                "value": 1
              },
              {
                "id": 2,
                "color": {
                  "Default": "var(--dt-colors-charts-status-critical-default, #c4233b)"
                },
                "comparator": "=",
                "label": "",
                "value": 0
              }
            ]
          },
          {
            "id": 6,
            "field": "Avail Budget",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 0,
                "color": {
                  "Default": "var(--dt-colors-charts-status-ideal-default, #2f6863)"
                },
                "comparator": "≥",
                "label": "",
                "value": 0.1
              },
              {
                "id": 1,
                "color": {
                  "Default": "var(--dt-colors-charts-status-warning-default, #eca440)"
                },
                "comparator": ">",
                "label": "",
                "value": 0
              },
              {
                "id": 2,
                "color": {
                  "Default": "var(--dt-colors-charts-status-critical-default, #c4233b)"
                },
                "comparator": "<",
                "label": "",
                "value": 0
              }
            ]
          }
        ],
        "chartSettings": {
          "xAxisScaling": "analyzedTimeframe",
          "gapPolicy": "gap",
          "circleChartSettings": {
            "groupingThresholdType": "relative",
            "groupingThresholdValue": 0,
            "valueType": "relative"
          },
          "categoryOverrides": {},
          "curve": "linear",
          "pointsDisplay": "auto",
          "categoricalBarChartSettings": {
            "layout": "horizontal",
            "categoryAxisTickLayout": "horizontal",
            "scale": "absolute",
            "groupMode": "stacked",
            "colorPaletteMode": "multi-color",
            "categoryAxis": ["Endpoint", "dt.entity.service", "link"],
            "categoryAxisLabel": "Endpoint,dt.entity.service,link",
            "valueAxis": [
              "Avail SLO",
              "Avail Budget",
              "Successful Requests",
              "Failed Requests",
              "threshold"
            ],
            "valueAxisLabel": "Avail SLO,Avail Budget,Successful Requests,Failed Requests,threshold",
            "tooltipVariant": "single"
          },
          "colorPalette": "categorical",
          "valueRepresentation": "absolute",
          "truncationMode": "middle",
          "xAxisLabel": "timeframe",
          "xAxisIsLabelVisible": false,
          "hiddenLegendFields": [],
          "leftYAxisSettings": {
            "isLabelVisible": true,
            "label": "Service request count"
          }
        },
        "singleValue": {
          "showLabel": false,
          "label": "Name",
          "prefixIcon": "",
          "recordField": "value",
          "autoscale": true,
          "alignment": "center",
          "trend": {
            "trendType": "auto",
            "isVisible": true,
            "isLabelVisible": false,
            "isRelative": true,
            "downward": {
              "Default": "var(--dt-colors-charts-apdex-good-default, #1c520a)"
            },
            "upward": {
              "Default": "var(--dt-colors-charts-loglevel-emergency-default, #ae132d)"
            }
          },
          "colorThresholdTarget": "value",
          "sparklineSettings": {
            "showTicks": true,
            "lineType": "linear",
            "variant": "line"
          }
        },
        "table": {
          "rowDensity": "condensed",
          "enableSparklines": false,
          "hiddenColumns": [["threshold"]],
          "linewrapEnabled": false,
          "lineWrapIds": [
            ["Endpoint"],
            ["Avail SLO"],
            ["Avail Budget"],
            ["dt.entity.service"]
          ],
          "monospacedFontEnabled": false,
          "monospacedFontColumns": [],
          "columnWidths": {
            "[\"entity.name\"]": 190.08593750000003,
            "[\"endpoint.name\"]": 300.4583435058594,
            "[\"Endpoint\"]": 139.58334350585938
          },
          "columnTypeOverrides": [
            {
              "id": 1080912.5999999978,
              "fields": ["link"],
              "value": "markdown"
            }
          ],
          "enableThresholdInRow": true,
          "sortBy": { "columnId": "[\"Avail SLO\"]", "direction": "ascending" },
          "colorThresholdTarget": "background",
          "selectedColumnForRowThreshold": "threshold"
        },
        "honeycomb": {
          "shape": "hexagon",
          "legend": { "hidden": false, "position": "auto" },
          "displayedFields": ["Endpoint", "dt.entity.service", "link"],
          "dataMappings": { "value": "Avail SLO" },
          "truncationMode": "middle",
          "colorMode": "color-palette",
          "colorPalette": "blue"
        },
        "histogram": {
          "legend": "auto",
          "yAxis": { "label": "Frequency", "scale": "linear" },
          "colorPalette": "categorical",
          "dataMappings": [
            { "valueAxis": "Avail SLO", "rangeAxis": "" },
            { "valueAxis": "Avail Budget", "rangeAxis": "" },
            { "valueAxis": "Successful Requests", "rangeAxis": "" },
            { "valueAxis": "Failed Requests", "rangeAxis": "" },
            { "valueAxis": "threshold", "rangeAxis": "" }
          ],
          "variant": "single",
          "truncationMode": "middle",
          "displayedFields": ["Endpoint", "dt.entity.service", "link"]
        },
        "autoSelectVisualization": false,
        "unitsOverrides": [
          {
            "identifier": "AVG",
            "unitCategory": "time",
            "baseUnit": "microsecond",
            "displayUnit": null,
            "decimals": 2,
            "suffix": "",
            "delimiter": false,
            "added": 1734017015396
          }
        ],
        "recordView": { "fieldsWidth": 200.67 }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      }
    },
    "23": {
      "type": "data",
      "title": "Availability Insights by Service",
      "query": "timeseries \ntotal = sum(dt.service.request.count)\n,failures=sum(dt.service.request.failure_count)\n, interval:1m\n, by:{dt.entity.service,endpoint.name}\n, filter:{\n  if(toBoolean($MZ_Override), \n    if(stringLength($Endpoint) > 0, \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else:\n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and in(entityAttr(dt.entity.service, \"managementZones\"), $App), \n      else: \n        in(entityAttr(dt.entity.service, \"managementZones\"), $App)\n      )\n    ), \n  else: \n    if(stringLength($Endpoint) > 0, \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else: \n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(entityName(dt.entity.service), $Service), \n      else: \n        matchesPhrase(entityName(dt.entity.service), $Service)\n      )\n    )\n  )\n}\n| summarize total = sum(total[]), failures = sum(failures[])\n,by:{timeframe,interval,dt.entity.service} \n\n//Availability SLI\n| fieldsAdd availability_good = total[]-failures[]\n| fieldsAdd availability_sli=((availability_good[])/total[])*(100)\n\n| fieldsAdd Error_budget = (1 - (toDouble($Target)/100))\n| fieldsAdd avail_rate_consumed = (1 - (arrayAvg(availability_sli)/100))\n| fieldsAdd threshold = if(arrayAvg(availability_sli) >= toDouble($Target),1,else:0)\n| fields `Name` = entityName(dt.entity.service),\n`Avail SLO` = arrayAvg(availability_sli), `Avail Budget` = (Error_budget - avail_rate_consumed) * 100,\n`Successful Requests` = arraySum(availability_good), `Failed Requests` = arraySum(failures),dt.entity.service, threshold\n| fieldsAdd link = concat(\"[mda]\",\"(\",$MDA,\")\")\n| fieldsAdd link = replaceString(link,\"{{`{{SERVICE_ID}}`}}\",dt.entity.service)\n| fieldsAdd link = replaceString(link,\"{{`{{METRIC}}`}}\",\"FAILURE_RATE\")\n| fieldsAdd link = replaceString(link,\"{{`{{FROM}}`}}\",toString($dt_timeframe_from))\n| fieldsAdd link = replaceString(link,\"{{`{{TO}}`}}\",toString($dt_timeframe_to))\n| sort `Avail SLO` asc",
      "davis": {
        "enabled": false,
        "davisVisualization": { "isAvailable": true }
      },
      "visualization": "table",
      "visualizationSettings": {
        "thresholds": [
          {
            "id": 4,
            "field": "threshold",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 0,
                "color": {
                  "Default": "var(--dt-colors-charts-status-ideal-default, #2f6863)"
                },
                "comparator": "=",
                "label": "",
                "value": 1
              },
              {
                "id": 1,
                "color": {
                  "Default": "var(--dt-colors-charts-loglevel-emergency-default, #ae132d)"
                },
                "comparator": "=",
                "label": "",
                "value": 0
              }
            ]
          },
          {
            "id": 6,
            "field": "Avail Budget",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 0,
                "color": {
                  "Default": "var(--dt-colors-charts-status-ideal-default, #2f6863)"
                },
                "comparator": "≥",
                "label": "",
                "value": 0.1
              },
              {
                "id": 1,
                "color": {
                  "Default": "var(--dt-colors-charts-status-warning-default, #eca440)"
                },
                "comparator": ">",
                "label": "",
                "value": 0
              },
              {
                "id": 2,
                "color": {
                  "Default": "var(--dt-colors-charts-status-critical-default, #c4233b)"
                },
                "comparator": "<",
                "label": "",
                "value": 0
              }
            ]
          }
        ],
        "chartSettings": {
          "xAxisScaling": "analyzedTimeframe",
          "gapPolicy": "gap",
          "circleChartSettings": {
            "groupingThresholdType": "relative",
            "groupingThresholdValue": 0,
            "valueType": "relative"
          },
          "categoryOverrides": {},
          "curve": "linear",
          "pointsDisplay": "auto",
          "categoricalBarChartSettings": {
            "layout": "horizontal",
            "categoryAxisTickLayout": "horizontal",
            "scale": "absolute",
            "groupMode": "stacked",
            "colorPaletteMode": "multi-color",
            "categoryAxis": ["Name", "dt.entity.service", "link"],
            "categoryAxisLabel": "Name,dt.entity.service,link",
            "valueAxis": [
              "Avail SLO",
              "Avail Budget",
              "Successful Requests",
              "Failed Requests",
              "threshold"
            ],
            "valueAxisLabel": "Avail SLO,Avail Budget,Successful Requests,Failed Requests,threshold",
            "tooltipVariant": "single"
          },
          "colorPalette": "categorical",
          "valueRepresentation": "absolute",
          "truncationMode": "middle",
          "xAxisLabel": "timeframe",
          "xAxisIsLabelVisible": false,
          "hiddenLegendFields": [],
          "leftYAxisSettings": {
            "isLabelVisible": true,
            "label": "Service request count"
          }
        },
        "singleValue": {
          "showLabel": false,
          "label": "Name",
          "prefixIcon": "",
          "recordField": "value",
          "autoscale": true,
          "alignment": "center",
          "trend": {
            "trendType": "auto",
            "isVisible": true,
            "isLabelVisible": false,
            "isRelative": true,
            "downward": {
              "Default": "var(--dt-colors-charts-apdex-good-default, #1c520a)"
            },
            "upward": {
              "Default": "var(--dt-colors-charts-loglevel-emergency-default, #ae132d)"
            }
          },
          "colorThresholdTarget": "value",
          "sparklineSettings": {
            "showTicks": true,
            "lineType": "linear",
            "variant": "line"
          }
        },
        "table": {
          "rowDensity": "condensed",
          "enableSparklines": false,
          "hiddenColumns": [["threshold"]],
          "linewrapEnabled": false,
          "lineWrapIds": [
            ["Name"],
            ["Avail SLO"],
            ["Avail Budget"],
            ["dt.entity.service"]
          ],
          "monospacedFontEnabled": false,
          "monospacedFontColumns": [],
          "columnWidths": {
            "[\"entity.name\"]": 190.08593750000003,
            "[\"Name\"]": 166.20834350585938,
            "[\"Status\"]": 104.09375,
            "[\"dt.entity.service\"]": 75.11175537109375,
            "[\"Remaining_error_budget\"]": 136.03030395507812,
            "[\"SLO\"]": 74.71780395507812,
            "[\"Budget\"]": 103.38068389892578
          },
          "columnTypeOverrides": [
            { "id": 963744.2999999989, "fields": ["link"], "value": "markdown" }
          ],
          "enableThresholdInRow": true,
          "sortBy": { "columnId": "[\"Avail SLO\"]", "direction": "ascending" },
          "colorThresholdTarget": "background",
          "selectedColumnForRowThreshold": "threshold"
        },
        "honeycomb": {
          "shape": "hexagon",
          "legend": { "hidden": false, "position": "auto" },
          "displayedFields": ["Name", "dt.entity.service", "link"],
          "dataMappings": { "value": "Avail SLO" },
          "truncationMode": "middle",
          "colorMode": "color-palette",
          "colorPalette": "blue"
        },
        "histogram": {
          "legend": "auto",
          "yAxis": { "label": "Frequency", "scale": "linear" },
          "colorPalette": "categorical",
          "dataMappings": [
            { "valueAxis": "Avail SLO", "rangeAxis": "" },
            { "valueAxis": "Avail Budget", "rangeAxis": "" },
            { "valueAxis": "Successful Requests", "rangeAxis": "" },
            { "valueAxis": "Failed Requests", "rangeAxis": "" },
            { "valueAxis": "threshold", "rangeAxis": "" }
          ],
          "variant": "single",
          "truncationMode": "middle",
          "displayedFields": ["Name", "dt.entity.service", "link"]
        },
        "autoSelectVisualization": false,
        "unitsOverrides": [
          {
            "identifier": "AVG",
            "unitCategory": "time",
            "baseUnit": "microsecond",
            "displayUnit": null,
            "decimals": 2,
            "suffix": "",
            "delimiter": false,
            "added": 1734046759478
          }
        ],
        "recordView": { "fieldsWidth": 200.67 }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      }
    },
    "24": {
      "type": "data",
      "title": "Performance Insights by Service",
      "query": "timeseries avg = avg(dt.service.request.response_time)\n, median = median(dt.service.request.response_time)\n, by:{dt.entity.service}\n, interval:1m\n// , filter:{if(toBoolean($MZ_Override),in(entityAttr(dt.entity.service,\"managementZones\"),$App),\n// else:if($Service != \"\",matchesPhrase(entityName(dt.entity.service),$Service),else:false))}\n, filter: {if(toBoolean($MZ_Override), \n    if(stringLength($Endpoint) > 0,\n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else:\n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and in(entityAttr(dt.entity.service, \"managementZones\"), $App), \n      else: \n        in(entityAttr(dt.entity.service, \"managementZones\"), $App)\n      )\n    ), \n  else: \n    if(stringLength($Endpoint) > 0, \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else: \n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(entityName(dt.entity.service), $Service), \n      else: \n        matchesPhrase(entityName(dt.entity.service), $Service)\n      )\n    )\n  )}\n| summarize avg = avg(avg[]),by:{dt.entity.service}\n| fields avg = arrayRemoveNulls(avg), dt.entity.service\n// Performance SLI\n| fieldsAdd high=iCollectArray(if(avg[]> (1000 * toDouble($SLI_Threshold)), avg[]))\n| fieldsAdd low=iCollectArray(if(avg[]<= (1000 * toDouble($SLI_Threshold)), avg[]))\n| fieldsAdd highRespTimes=iCollectArray(if(isNull(high[]),0,else:1))\n| fieldsAdd lowRespTimes=iCollectArray(if(isNull(low[]),0,else:1))\n| fieldsAdd performance_sli = 100*(lowRespTimes[]/(lowRespTimes[]+highRespTimes[]))\n\n\n| fieldsAdd Error_budget = (1 - (toDouble($Target)/100))\n| fieldsAdd perf_rate_consumed = (1 - (arrayAvg(performance_sli)/100))\n| fieldsAdd threshold = if(arrayAvg(performance_sli) >= toDouble($Target),1,else:0)\n| fields `Name` = entityName(dt.entity.service),\n`Perf SLO` = arrayAvg(performance_sli), `Perf Budget` = (Error_budget - perf_rate_consumed) * 100,\n`AVG` = arrayAvg(avg),dt.entity.service, threshold\n| fieldsAdd link = concat(\"[mda]\",\"(\",$MDA,\")\")\n| fieldsAdd link = replaceString(link,\"{{`{{SERVICE_ID}}`}}\",dt.entity.service)\n| fieldsAdd link = replaceString(link,\"{{`{{METRIC}}`}}\",\"RESPONSE_TIME\")\n| fieldsAdd link = replaceString(link,\"{{`{{FROM}}`}}\",toString($dt_timeframe_from))\n| fieldsAdd link = replaceString(link,\"{{`{{TO}}`}}\",toString($dt_timeframe_to))\n| sort `Perf SLO` asc",
      "davis": {
        "enabled": false,
        "davisVisualization": { "isAvailable": true }
      },
      "visualization": "table",
      "visualizationSettings": {
        "thresholds": [
          {
            "id": 1,
            "field": "threshold",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 0,
                "color": {
                  "Default": "var(--dt-colors-charts-status-ideal-default, #2f6863)"
                },
                "comparator": "=",
                "label": "",
                "value": 1
              },
              {
                "id": 1,
                "color": {
                  "Default": "var(--dt-colors-charts-loglevel-emergency-default, #ae132d)"
                },
                "comparator": "=",
                "label": "",
                "value": 0
              }
            ]
          },
          {
            "id": 5,
            "field": "Perf Budget",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 0,
                "color": {
                  "Default": "var(--dt-colors-charts-status-ideal-default, #2f6863)"
                },
                "comparator": "≥",
                "label": "",
                "value": 0.1
              },
              {
                "id": 1,
                "color": {
                  "Default": "var(--dt-colors-charts-status-warning-default, #eca440)"
                },
                "comparator": ">",
                "label": "",
                "value": 0
              },
              {
                "id": 2,
                "color": {
                  "Default": "var(--dt-colors-charts-status-critical-default, #c4233b)"
                },
                "comparator": "<",
                "label": "",
                "value": 0
              }
            ]
          }
        ],
        "chartSettings": {
          "xAxisScaling": "analyzedTimeframe",
          "gapPolicy": "gap",
          "circleChartSettings": {
            "groupingThresholdType": "relative",
            "groupingThresholdValue": 0,
            "valueType": "relative"
          },
          "categoryOverrides": {},
          "curve": "linear",
          "pointsDisplay": "auto",
          "categoricalBarChartSettings": {
            "layout": "horizontal",
            "categoryAxisTickLayout": "horizontal",
            "scale": "absolute",
            "groupMode": "stacked",
            "colorPaletteMode": "multi-color",
            "categoryAxis": ["Name", "dt.entity.service", "link"],
            "categoryAxisLabel": "Name,dt.entity.service,link",
            "valueAxis": ["Perf SLO", "Perf Budget", "AVG", "threshold"],
            "valueAxisLabel": "Perf SLO,Perf Budget,AVG,threshold",
            "tooltipVariant": "single"
          },
          "colorPalette": "categorical",
          "valueRepresentation": "absolute",
          "truncationMode": "middle",
          "xAxisLabel": "timeframe",
          "xAxisIsLabelVisible": false,
          "hiddenLegendFields": [],
          "leftYAxisSettings": {
            "isLabelVisible": true,
            "label": "Service request count"
          }
        },
        "singleValue": {
          "showLabel": false,
          "label": "Name",
          "prefixIcon": "",
          "recordField": "value",
          "autoscale": true,
          "alignment": "center",
          "trend": {
            "trendType": "auto",
            "isVisible": true,
            "isLabelVisible": false,
            "isRelative": true,
            "downward": {
              "Default": "var(--dt-colors-charts-apdex-good-default, #1c520a)"
            },
            "upward": {
              "Default": "var(--dt-colors-charts-loglevel-emergency-default, #ae132d)"
            }
          },
          "colorThresholdTarget": "value",
          "sparklineSettings": {
            "showTicks": true,
            "lineType": "linear",
            "variant": "line"
          }
        },
        "table": {
          "rowDensity": "condensed",
          "enableSparklines": false,
          "hiddenColumns": [["threshold"]],
          "linewrapEnabled": false,
          "lineWrapIds": [
            ["Name"],
            ["Perf SLO"],
            ["Perf Budget"],
            ["AVG"],
            ["dt.entity.service"]
          ],
          "monospacedFontEnabled": false,
          "monospacedFontColumns": [],
          "columnWidths": {
            "[\"entity.name\"]": 190.08593750000003,
            "[\"Name\"]": 195.20834350585938,
            "[\"Status\"]": 104.09375,
            "[\"dt.entity.service\"]": 75.11175537109375,
            "[\"Remaining_error_budget\"]": 136.03030395507812,
            "[\"SLO\"]": 74.71780395507812,
            "[\"Budget\"]": 103.38068389892578
          },
          "columnTypeOverrides": [
            { "id": 787543.7999999989, "fields": ["link"], "value": "markdown" }
          ],
          "enableThresholdInRow": true,
          "sortBy": { "columnId": "[\"Perf SLO\"]", "direction": "ascending" },
          "colorThresholdTarget": "background",
          "selectedColumnForRowThreshold": "threshold"
        },
        "honeycomb": {
          "shape": "hexagon",
          "legend": { "hidden": false, "position": "auto" },
          "displayedFields": ["Name", "dt.entity.service", "link"],
          "dataMappings": { "value": "Perf SLO" },
          "truncationMode": "middle",
          "colorMode": "color-palette",
          "colorPalette": "blue"
        },
        "histogram": {
          "legend": "auto",
          "yAxis": { "label": "Frequency", "scale": "linear" },
          "colorPalette": "categorical",
          "dataMappings": [
            { "valueAxis": "Perf SLO", "rangeAxis": "" },
            { "valueAxis": "Perf Budget", "rangeAxis": "" },
            { "valueAxis": "AVG", "rangeAxis": "" },
            { "valueAxis": "threshold", "rangeAxis": "" }
          ],
          "variant": "single",
          "truncationMode": "middle",
          "displayedFields": ["Name", "dt.entity.service", "link"]
        },
        "autoSelectVisualization": false,
        "unitsOverrides": [
          {
            "identifier": "AVG",
            "unitCategory": "time",
            "baseUnit": "microsecond",
            "displayUnit": null,
            "decimals": 2,
            "suffix": "",
            "delimiter": false,
            "added": 1734046759478
          }
        ],
        "recordView": { "fieldsWidth": 200.67 }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      }
    },
    "25": {
      "type": "data",
      "title": "SLO",
      "query": "timeseries avg = avg(dt.service.request.response_time),\ntotal = sum(dt.service.request.count)\n,failures=sum(dt.service.request.failure_count)\n, interval:1m\n, by:{dt.entity.service,endpoint.name}\n, filter:{\n  if(toBoolean($MZ_Override), \n    if(stringLength($Endpoint) > 0, \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        // and not(entityAttr(dt.entity.service, \"isExternalService\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else:\n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        // and not(entityAttr(dt.entity.service, \"isExternalService\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and in(entityAttr(dt.entity.service, \"managementZones\"), $App), \n      else: \n        in(entityAttr(dt.entity.service, \"managementZones\"), $App)\n      )\n    ), \n  else: \n    if(stringLength($Endpoint) > 0, \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and not(entityAttr(dt.entity.service, \"isExternalService\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else: \n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and not(entityAttr(dt.entity.service, \"isExternalService\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(entityName(dt.entity.service), $Service), \n      else: \n        matchesPhrase(entityName(dt.entity.service), $Service)\n      )\n    )\n  )\n}\n| summarize avg = avg(avg[]),total = sum(total[]), failures = sum(failures[])\n,by:{timeframe,interval} \n\n// Performance SLI\n| fieldsAdd high=iCollectArray(if(avg[]> (1000 * toDouble($SLI_Threshold)), avg[]))\n| fieldsAdd low=iCollectArray(if(avg[]<= (1000 * toDouble($SLI_Threshold)), avg[]))\n| fieldsAdd highRespTimes=iCollectArray(if(isNull(high[]),0,else:1))\n| fieldsAdd lowRespTimes=iCollectArray(if(isNull(low[]),0,else:1))\n| fieldsAdd performance_sli=100*(lowRespTimes[]/(lowRespTimes[]+highRespTimes[]))\n\n//Availability SLI\n| fieldsAdd availability_good = total[]-failures[]\n| fieldsAdd availability_sli=((availability_good[])/total[])*(100)\n\n| summarize status = avg((performance_sli[]+availability_sli[])/2), by:{interval, timeframe}\n\n// Error Budget Calculation\n| fieldsAdd Error_budget = (1 - (toDouble($Target)/100))\n| fieldsAdd Error_rate_consumed = (1 - (status[]/100))\n\n| summarize budget = avg((Error_budget - Error_rate_consumed[]) * 100), status = avg(status[]), by:{interval, timeframe}\n| fieldsAdd threshold = if(arrayAvg(arrayRemoveNulls(status)) >= toDouble($Target),1,else:0)\n| fields status = arrayAvg(arrayRemoveNulls(status)), status_value = status, budget = arrayAvg(arrayRemoveNulls(budget)),budget_value=budget,threshold,interval, timeframe\n// // | fields status = arrayRemoveNulls(status), interval, timeframe\n\n// | fieldsAdd value = arrayAvg(status) \n// | fields value, status, threshold, interval, timeframe",
      "davis": {
        "enabled": false,
        "davisVisualization": { "isAvailable": true }
      },
      "visualization": "table",
      "visualizationSettings": {
        "thresholds": [
          {
            "id": 1,
            "field": "threshold",
            "title": "Test",
            "isEnabled": true,
            "rules": [
              {
                "id": 0,
                "color": {
                  "Default": "var(--dt-colors-charts-categorical-color-13-default, #1c520a)"
                },
                "comparator": "=",
                "label": "Good",
                "value": 1
              },
              {
                "id": 2,
                "color": {
                  "Default": "var(--dt-colors-charts-loglevel-emergency-default, #ae132d)"
                },
                "comparator": "=",
                "label": "Bad",
                "value": 0
              }
            ]
          },
          {
            "id": 2,
            "field": "budget",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 0,
                "color": {
                  "Default": "var(--dt-colors-charts-status-ideal-default, #2f6863)"
                },
                "comparator": "≥",
                "label": "",
                "value": 1
              },
              {
                "id": 1,
                "color": {
                  "Default": "var(--dt-colors-charts-status-warning-default, #eca440)"
                },
                "comparator": "≥",
                "label": "",
                "value": 0
              },
              {
                "id": 2,
                "color": {
                  "Default": "var(--dt-colors-charts-status-critical-default, #c4233b)"
                },
                "comparator": "<",
                "label": "",
                "value": 0
              }
            ]
          }
        ],
        "chartSettings": {
          "xAxisScaling": "analyzedTimeframe",
          "gapPolicy": "connect",
          "circleChartSettings": {
            "groupingThresholdType": "relative",
            "groupingThresholdValue": 0,
            "valueType": "relative"
          },
          "categoryOverrides": {},
          "curve": "linear",
          "pointsDisplay": "auto",
          "categoricalBarChartSettings": {
            "layout": "horizontal",
            "categoryAxisTickLayout": "horizontal",
            "scale": "absolute",
            "groupMode": "stacked",
            "colorPaletteMode": "multi-color",
            "categoryAxis": ["status", "budget", "threshold", "interval"],
            "categoryAxisLabel": "status,budget,threshold,interval",
            "valueAxis": ["status", "budget", "threshold"],
            "valueAxisLabel": "status,budget,threshold",
            "tooltipVariant": "single"
          },
          "colorPalette": "categorical",
          "valueRepresentation": "absolute",
          "truncationMode": "middle",
          "xAxisLabel": "timeframe",
          "xAxisIsLabelVisible": false,
          "hiddenLegendFields": [],
          "leftYAxisSettings": {
            "isLabelVisible": false,
            "label": "Service request response time",
            "max": 150,
            "scale": "linear"
          },
          "legend": { "hidden": true },
          "tooltip": { "variant": "single" },
          "fieldMapping": {
            "timestamp": "timeframe",
            "leftAxisValues": ["status_value", "budget_value"]
          },
          "bandChartSettings": {
            "lower": "status_value",
            "upper": "budget_value",
            "time": "timeframe"
          }
        },
        "singleValue": {
          "showLabel": false,
          "prefixIcon": "",
          "autoscale": true,
          "alignment": "center",
          "trend": { "trendType": "auto", "isVisible": true },
          "colorThresholdTarget": "background",
          "recordField": "value",
          "label": "dt.entity.service"
        },
        "table": {
          "rowDensity": "default",
          "enableSparklines": false,
          "hiddenColumns": [
            ["status_value"],
            ["budget_value"],
            ["threshold"],
            ["interval"],
            ["timeframe"]
          ],
          "linewrapEnabled": false,
          "lineWrapIds": [],
          "monospacedFontEnabled": false,
          "monospacedFontColumns": [["status"], ["budget"]],
          "columnWidths": {
            "[\"status_value\"]": 116.72221374511719,
            "[\"status\"]": 211.50694274902344
          },
          "columnTypeOverrides": [
            {
              "fields": ["status_value", "budget_value"],
              "value": "sparkline",
              "id": 1736865813658
            }
          ],
          "colorThresholdTarget": "background",
          "enableThresholdInRow": true,
          "selectedColumnForRowThreshold": "threshold"
        },
        "honeycomb": {
          "shape": "hexagon",
          "legend": { "hidden": false, "position": "auto" },
          "displayedFields": [],
          "dataMappings": {},
          "truncationMode": "middle",
          "colorMode": "color-palette",
          "colorPalette": "categorical"
        },
        "histogram": {
          "legend": "auto",
          "yAxis": { "label": "Frequency", "scale": "linear" },
          "colorPalette": "categorical",
          "dataMappings": [
            { "valueAxis": "status", "rangeAxis": "" },
            { "valueAxis": "budget", "rangeAxis": "" },
            { "valueAxis": "threshold", "rangeAxis": "" },
            { "valueAxis": "interval", "rangeAxis": "" }
          ],
          "variant": "single",
          "truncationMode": "middle",
          "displayedFields": []
        },
        "autoSelectVisualization": false,
        "recordView": { "fieldsWidth": 203.49 }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      }
    },
    "26": {
      "type": "data",
      "title": "Performance SLO",
      "query": "timeseries avg = avg(dt.service.request.response_time),\ntotal = sum(dt.service.request.count)\n,failures=sum(dt.service.request.failure_count)\n, interval:1m\n, by:{dt.entity.service,endpoint.name}\n, filter:{\n  if(toBoolean($MZ_Override), \n    if(stringLength($Endpoint) > 0, \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        // and not(entityAttr(dt.entity.service, \"isExternalService\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else:\n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        // and not(entityAttr(dt.entity.service, \"isExternalService\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and in(entityAttr(dt.entity.service, \"managementZones\"), $App), \n      else: \n        in(entityAttr(dt.entity.service, \"managementZones\"), $App)\n      )\n    ), \n  else: \n    if(stringLength($Endpoint) > 0, \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and not(entityAttr(dt.entity.service, \"isExternalService\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else: \n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and not(entityAttr(dt.entity.service, \"isExternalService\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(entityName(dt.entity.service), $Service), \n      else: \n        matchesPhrase(entityName(dt.entity.service), $Service)\n      )\n    )\n  )\n}\n| summarize avg = avg(avg[]),total = sum(total[]), failures = sum(failures[])\n,by:{timeframe,interval} \n\n// Performance SLI\n| fieldsAdd high=iCollectArray(if(avg[]> (1000 * toDouble($SLI_Threshold)), avg[]))\n| fieldsAdd low=iCollectArray(if(avg[]<= (1000 * toDouble($SLI_Threshold)), avg[]))\n| fieldsAdd highRespTimes=iCollectArray(if(isNull(high[]),0,else:1))\n| fieldsAdd lowRespTimes=iCollectArray(if(isNull(low[]),0,else:1))\n| fieldsAdd performance_sli=100*(lowRespTimes[]/(lowRespTimes[]+highRespTimes[]))\n\n\n| summarize status = avg(performance_sli[]), by:{interval, timeframe}\n\n// Error Budget Calculation\n| fieldsAdd Error_budget = (1 - (toDouble($Target)/100))\n| fieldsAdd Error_rate_consumed = (1 - (status[]/100))\n\n| summarize budget = avg((Error_budget - Error_rate_consumed[]) * 100), status = avg(status[]), by:{interval, timeframe}\n| fieldsAdd threshold = if(arrayAvg(arrayRemoveNulls(status)) >= toDouble($Target),1,else:0)\n| fields status = arrayAvg(arrayRemoveNulls(status)), status_value = status, budget = arrayAvg(arrayRemoveNulls(budget)),budget_value=budget,threshold,interval, timeframe\n// // | fields status = arrayRemoveNulls(status), interval, timeframe\n\n// | fieldsAdd value = arrayAvg(status) \n// | fields value, status, threshold, interval, timeframe",
      "davis": {
        "enabled": false,
        "davisVisualization": { "isAvailable": true }
      },
      "visualization": "table",
      "visualizationSettings": {
        "thresholds": [
          {
            "id": 1,
            "field": "threshold",
            "title": "Test",
            "isEnabled": true,
            "rules": [
              {
                "id": 0,
                "color": {
                  "Default": "var(--dt-colors-charts-categorical-color-13-default, #1c520a)"
                },
                "comparator": "=",
                "label": "Good",
                "value": 1
              },
              {
                "id": 2,
                "color": {
                  "Default": "var(--dt-colors-charts-loglevel-emergency-default, #ae132d)"
                },
                "comparator": "=",
                "label": "Bad",
                "value": 0
              }
            ]
          },
          {
            "id": 2,
            "field": "budget",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 0,
                "color": {
                  "Default": "var(--dt-colors-charts-status-ideal-default, #2f6863)"
                },
                "comparator": "≥",
                "label": "",
                "value": 1
              },
              {
                "id": 1,
                "color": {
                  "Default": "var(--dt-colors-charts-status-warning-default, #eca440)"
                },
                "comparator": "≥",
                "label": "",
                "value": 0
              },
              {
                "id": 2,
                "color": {
                  "Default": "var(--dt-colors-charts-status-critical-default, #c4233b)"
                },
                "comparator": "<",
                "label": "",
                "value": 0
              }
            ]
          }
        ],
        "chartSettings": {
          "xAxisScaling": "analyzedTimeframe",
          "gapPolicy": "connect",
          "circleChartSettings": {
            "groupingThresholdType": "relative",
            "groupingThresholdValue": 0,
            "valueType": "relative"
          },
          "categoryOverrides": {},
          "curve": "linear",
          "pointsDisplay": "auto",
          "categoricalBarChartSettings": {
            "layout": "horizontal",
            "categoryAxisTickLayout": "horizontal",
            "scale": "absolute",
            "groupMode": "stacked",
            "colorPaletteMode": "multi-color",
            "categoryAxis": ["status", "budget", "threshold", "interval"],
            "categoryAxisLabel": "status,budget,threshold,interval",
            "valueAxis": ["status", "budget", "threshold"],
            "valueAxisLabel": "status,budget,threshold",
            "tooltipVariant": "single"
          },
          "colorPalette": "categorical",
          "valueRepresentation": "absolute",
          "truncationMode": "middle",
          "xAxisLabel": "timeframe",
          "xAxisIsLabelVisible": false,
          "hiddenLegendFields": [],
          "leftYAxisSettings": {
            "isLabelVisible": false,
            "label": "Service request response time",
            "max": 150,
            "scale": "linear"
          },
          "legend": { "hidden": true },
          "tooltip": { "variant": "single" },
          "fieldMapping": {
            "timestamp": "timeframe",
            "leftAxisValues": ["status_value", "budget_value"]
          },
          "bandChartSettings": {
            "lower": "status_value",
            "upper": "budget_value",
            "time": "timeframe"
          }
        },
        "singleValue": {
          "showLabel": false,
          "prefixIcon": "",
          "autoscale": true,
          "alignment": "center",
          "trend": { "trendType": "auto", "isVisible": true },
          "colorThresholdTarget": "background",
          "recordField": "value",
          "label": "dt.entity.service"
        },
        "table": {
          "rowDensity": "comfortable",
          "enableSparklines": false,
          "hiddenColumns": [
            ["status_value"],
            ["budget_value"],
            ["threshold"],
            ["interval"],
            ["timeframe"]
          ],
          "linewrapEnabled": false,
          "lineWrapIds": [],
          "monospacedFontEnabled": false,
          "monospacedFontColumns": [],
          "columnWidths": {
            "[\"status_value\"]": 116.72221374511719,
            "[\"status\"]": 171.50694274902344
          },
          "columnTypeOverrides": [
            {
              "fields": ["status_value", "budget_value"],
              "value": "sparkline",
              "id": 1736865813185
            }
          ],
          "colorThresholdTarget": "background",
          "enableThresholdInRow": true,
          "selectedColumnForRowThreshold": "threshold"
        },
        "honeycomb": {
          "shape": "hexagon",
          "legend": { "hidden": false, "position": "auto" },
          "displayedFields": [],
          "dataMappings": {},
          "truncationMode": "middle",
          "colorMode": "color-palette",
          "colorPalette": "categorical"
        },
        "histogram": {
          "legend": "auto",
          "yAxis": { "label": "Frequency", "scale": "linear" },
          "colorPalette": "categorical",
          "dataMappings": [
            { "valueAxis": "status", "rangeAxis": "" },
            { "valueAxis": "budget", "rangeAxis": "" },
            { "valueAxis": "threshold", "rangeAxis": "" },
            { "valueAxis": "interval", "rangeAxis": "" }
          ],
          "variant": "single",
          "truncationMode": "middle",
          "displayedFields": []
        },
        "autoSelectVisualization": false,
        "recordView": { "fieldsWidth": 203.49 }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      }
    },
    "27": {
      "type": "data",
      "title": "Availability SLO",
      "query": "timeseries avg = avg(dt.service.request.response_time),\ntotal = sum(dt.service.request.count)\n,failures=sum(dt.service.request.failure_count)\n, interval:1m\n, by:{dt.entity.service,endpoint.name}\n, filter:{\n  if(toBoolean($MZ_Override), \n    if(stringLength($Endpoint) > 0, \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        // and not(entityAttr(dt.entity.service, \"isExternalService\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else:\n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        // and not(entityAttr(dt.entity.service, \"isExternalService\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and in(entityAttr(dt.entity.service, \"managementZones\"), $App), \n      else: \n        in(entityAttr(dt.entity.service, \"managementZones\"), $App)\n      )\n    ), \n  else: \n    if(stringLength($Endpoint) > 0, \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and not(entityAttr(dt.entity.service, \"isExternalService\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else: \n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and not(entityAttr(dt.entity.service, \"isExternalService\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(entityName(dt.entity.service), $Service), \n      else: \n        matchesPhrase(entityName(dt.entity.service), $Service)\n      )\n    )\n  )\n}\n| summarize avg = avg(avg[]),total = sum(total[]), failures = sum(failures[])\n,by:{timeframe,interval} \n\n//Availability SLI\n| fieldsAdd availability_good = total[]-failures[]\n| fieldsAdd availability_sli=((availability_good[])/total[])*(100)\n\n| summarize status = avg(availability_sli[]), by:{interval, timeframe}\n\n// Error Budget Calculation\n| fieldsAdd Error_budget = (1 - (toDouble($Target)/100))\n| fieldsAdd Error_rate_consumed = (1 - (status[]/100))\n\n| summarize budget = avg((Error_budget - Error_rate_consumed[]) * 100), status = avg(status[]), by:{interval, timeframe}\n| fieldsAdd threshold = if(arrayAvg(arrayRemoveNulls(status)) >= toDouble($Target),1,else:0)\n| fields status = arrayAvg(arrayRemoveNulls(status)), status_value = status, budget = arrayAvg(arrayRemoveNulls(budget)),budget_value=budget,threshold,interval, timeframe\n// // | fields status = arrayRemoveNulls(status), interval, timeframe\n\n// | fieldsAdd value = arrayAvg(status) \n// | fields value, status, threshold, interval, timeframe",
      "davis": {
        "enabled": false,
        "davisVisualization": { "isAvailable": true }
      },
      "visualization": "table",
      "visualizationSettings": {
        "thresholds": [
          {
            "id": 1,
            "field": "threshold",
            "title": "Test",
            "isEnabled": true,
            "rules": [
              {
                "id": 0,
                "color": {
                  "Default": "var(--dt-colors-charts-categorical-color-13-default, #1c520a)"
                },
                "comparator": "=",
                "label": "Good",
                "value": 1
              },
              {
                "id": 2,
                "color": {
                  "Default": "var(--dt-colors-charts-loglevel-emergency-default, #ae132d)"
                },
                "comparator": "=",
                "label": "Bad",
                "value": 0
              }
            ]
          },
          {
            "id": 2,
            "field": "budget",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 0,
                "color": {
                  "Default": "var(--dt-colors-charts-status-ideal-default, #2f6863)"
                },
                "comparator": "≥",
                "label": "",
                "value": 1
              },
              {
                "id": 1,
                "color": {
                  "Default": "var(--dt-colors-charts-status-warning-default, #eca440)"
                },
                "comparator": "≥",
                "label": "",
                "value": 0
              },
              {
                "id": 2,
                "color": {
                  "Default": "var(--dt-colors-charts-status-critical-default, #c4233b)"
                },
                "comparator": "<",
                "label": "",
                "value": 0
              }
            ]
          }
        ],
        "chartSettings": {
          "xAxisScaling": "analyzedTimeframe",
          "gapPolicy": "connect",
          "circleChartSettings": {
            "groupingThresholdType": "relative",
            "groupingThresholdValue": 0,
            "valueType": "relative"
          },
          "categoryOverrides": {},
          "curve": "linear",
          "pointsDisplay": "auto",
          "categoricalBarChartSettings": {
            "layout": "horizontal",
            "categoryAxisTickLayout": "horizontal",
            "scale": "absolute",
            "groupMode": "stacked",
            "colorPaletteMode": "multi-color",
            "categoryAxis": ["status", "budget", "threshold", "interval"],
            "categoryAxisLabel": "status,budget,threshold,interval",
            "valueAxis": ["status", "budget", "threshold"],
            "valueAxisLabel": "status,budget,threshold",
            "tooltipVariant": "single"
          },
          "colorPalette": "categorical",
          "valueRepresentation": "absolute",
          "truncationMode": "middle",
          "xAxisLabel": "timeframe",
          "xAxisIsLabelVisible": false,
          "hiddenLegendFields": [],
          "leftYAxisSettings": {
            "isLabelVisible": false,
            "label": "Service request response time",
            "max": 150,
            "scale": "linear"
          },
          "legend": { "hidden": true },
          "tooltip": { "variant": "single" },
          "fieldMapping": {
            "timestamp": "timeframe",
            "leftAxisValues": ["status_value", "budget_value"]
          },
          "bandChartSettings": {
            "lower": "status_value",
            "upper": "budget_value",
            "time": "timeframe"
          }
        },
        "singleValue": {
          "showLabel": false,
          "prefixIcon": "",
          "autoscale": true,
          "alignment": "center",
          "trend": { "trendType": "auto", "isVisible": true },
          "colorThresholdTarget": "background",
          "recordField": "value",
          "label": "dt.entity.service"
        },
        "table": {
          "rowDensity": "comfortable",
          "enableSparklines": false,
          "hiddenColumns": [
            ["status_value"],
            ["budget_value"],
            ["threshold"],
            ["interval"],
            ["timeframe"]
          ],
          "linewrapEnabled": false,
          "lineWrapIds": [],
          "monospacedFontEnabled": false,
          "monospacedFontColumns": [],
          "columnWidths": {
            "[\"status_value\"]": 116.72221374511719,
            "[\"status\"]": 157.50694274902344
          },
          "columnTypeOverrides": [
            {
              "fields": ["status_value", "budget_value"],
              "value": "sparkline",
              "id": 1736865813193
            }
          ],
          "colorThresholdTarget": "background",
          "enableThresholdInRow": true,
          "selectedColumnForRowThreshold": "threshold"
        },
        "honeycomb": {
          "shape": "hexagon",
          "legend": { "hidden": false, "position": "auto" },
          "displayedFields": [],
          "dataMappings": {},
          "truncationMode": "middle",
          "colorMode": "color-palette",
          "colorPalette": "categorical"
        },
        "histogram": {
          "legend": "auto",
          "yAxis": { "label": "Frequency", "scale": "linear" },
          "colorPalette": "categorical",
          "dataMappings": [
            { "valueAxis": "status", "rangeAxis": "" },
            { "valueAxis": "budget", "rangeAxis": "" },
            { "valueAxis": "threshold", "rangeAxis": "" },
            { "valueAxis": "interval", "rangeAxis": "" }
          ],
          "variant": "single",
          "truncationMode": "middle",
          "displayedFields": []
        },
        "autoSelectVisualization": false,
        "recordView": { "fieldsWidth": 203.49 }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      }
    },
    "28": {
      "type": "data",
      "title": "",
      "query": "timeseries min = min(dt.service.request.response_time),\nmax = max(dt.service.request.response_time),\navg = avg(dt.service.request.response_time),\nmedian = median(dt.service.request.response_time),\nperc75 = percentile(dt.service.request.response_time,75)\n,perc90 = percentile(dt.service.request.response_time,90)\n,perc95 = percentile(dt.service.request.response_time,95)\n,perc99 = percentile(dt.service.request.response_time,99)\n, by:{dt.entity.service,endpoint.name}\n, filter:{\n  if(toBoolean($MZ_Override), \n    if(stringLength($Endpoint) > 0, \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else:\n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and in(entityAttr(dt.entity.service, \"managementZones\"), $App), \n      else: \n        in(entityAttr(dt.entity.service, \"managementZones\"), $App)\n      )\n    ), \n  else: \n    if(stringLength($Endpoint) > 0, \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else: \n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(entityName(dt.entity.service), $Service), \n      else: \n        matchesPhrase(entityName(dt.entity.service), $Service)\n      )\n    )\n  )\n}\n| summarize avg = avg(avg[]), max = avg(max[]),\nmin = avg(min[]), median = avg(median[]),\nperc75 = avg(perc75[]), perc90 = avg(perc90[]),\nperc95 = avg(perc95[]), perc99 = avg(perc99[])\n, by: { timeframe, interval}\n| fieldsAdd metric1 = (min[] + max[])/2\n| fieldsAdd metric2 = (perc75[] + perc90[] + perc95[] + perc99[])/4\n| fieldsAdd metric3 = (avg[] + median[])/2\n| fieldsAdd metric = (metric1[] + metric2[] + metric3[])/3\n| fields min = arrayAvg(min), median = arrayAvg(median),\navg = arrayAvg(avg), \nperc75 = arrayAvg(perc75), perc90 = arrayAvg(perc90),\nperc95 = arrayAvg(perc95), perc99 = arrayAvg(perc99),\nmax = arrayAvg(max)\n",
      "davis": {
        "enabled": false,
        "davisVisualization": { "isAvailable": true }
      },
      "visualization": "table",
      "visualizationSettings": {
        "thresholds": [
          {
            "id": 1,
            "field": "thresholdmin",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 0,
                "color": {
                  "Default": "var(--dt-colors-charts-status-ideal-default, #2f6863)"
                },
                "comparator": "=",
                "label": "",
                "value": 1
              },
              {
                "id": 1,
                "color": {
                  "Default": "var(--dt-colors-charts-loglevel-emergency-default, #ae132d)"
                },
                "comparator": "=",
                "label": "",
                "value": 0
              }
            ]
          },
          {
            "id": 2,
            "field": "thresholdmedian",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 0,
                "color": {
                  "Default": "var(--dt-colors-charts-status-ideal-default, #2f6863)"
                },
                "comparator": "=",
                "label": "",
                "value": 1
              },
              {
                "id": 1,
                "color": {
                  "Default": "var(--dt-colors-charts-loglevel-emergency-default, #ae132d)"
                },
                "comparator": "=",
                "label": "",
                "value": 0
              }
            ]
          },
          {
            "id": 3,
            "field": "thresholdavg",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 0,
                "color": {
                  "Default": "var(--dt-colors-charts-status-ideal-default, #2f6863)"
                },
                "comparator": "=",
                "label": "",
                "value": 1
              },
              {
                "id": 1,
                "color": {
                  "Default": "var(--dt-colors-charts-loglevel-emergency-default, #ae132d)"
                },
                "comparator": "=",
                "label": "",
                "value": 0
              }
            ]
          },
          {
            "id": 4,
            "field": "thresholdperc75",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 0,
                "color": {
                  "Default": "var(--dt-colors-charts-status-ideal-default, #2f6863)"
                },
                "comparator": "=",
                "label": "",
                "value": 1
              },
              {
                "id": 1,
                "color": {
                  "Default": "var(--dt-colors-charts-loglevel-emergency-default, #ae132d)"
                },
                "comparator": "=",
                "label": "",
                "value": 0
              }
            ]
          },
          {
            "id": 5,
            "field": "thresholdperc90",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 0,
                "color": {
                  "Default": "var(--dt-colors-charts-status-ideal-default, #2f6863)"
                },
                "comparator": "=",
                "label": "",
                "value": 1
              },
              {
                "id": 2,
                "color": {
                  "Default": "var(--dt-colors-charts-status-critical-default, #c4233b)"
                },
                "comparator": "=",
                "label": "",
                "value": 0
              }
            ]
          },
          {
            "id": 6,
            "field": "thresholdperc95",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 0,
                "color": {
                  "Default": "var(--dt-colors-charts-status-ideal-default, #2f6863)"
                },
                "comparator": "=",
                "label": "",
                "value": 1
              },
              {
                "id": 2,
                "color": {
                  "Default": "var(--dt-colors-charts-status-critical-default, #c4233b)"
                },
                "comparator": "=",
                "label": "",
                "value": 0
              }
            ]
          },
          {
            "id": 7,
            "field": "thresholdperc99",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 0,
                "color": {
                  "Default": "var(--dt-colors-charts-status-ideal-default, #2f6863)"
                },
                "comparator": "=",
                "label": "",
                "value": 1
              },
              {
                "id": 2,
                "color": {
                  "Default": "var(--dt-colors-charts-status-critical-default, #c4233b)"
                },
                "comparator": "=",
                "label": "",
                "value": 0
              }
            ]
          },
          {
            "id": 8,
            "field": "thresholdmax",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 0,
                "color": {
                  "Default": "var(--dt-colors-charts-status-ideal-default, #2f6863)"
                },
                "comparator": "=",
                "label": "",
                "value": 1
              },
              {
                "id": 2,
                "color": {
                  "Default": "var(--dt-colors-charts-status-critical-default, #c4233b)"
                },
                "comparator": "=",
                "label": "",
                "value": 0
              }
            ]
          }
        ],
        "chartSettings": {
          "xAxisScaling": "analyzedTimeframe",
          "gapPolicy": "gap",
          "circleChartSettings": {
            "groupingThresholdType": "relative",
            "groupingThresholdValue": 0,
            "valueType": "relative"
          },
          "categoryOverrides": {},
          "curve": "linear",
          "pointsDisplay": "auto",
          "categoricalBarChartSettings": {
            "layout": "horizontal",
            "categoryAxisTickLayout": "horizontal",
            "scale": "absolute",
            "groupMode": "stacked",
            "colorPaletteMode": "multi-color",
            "categoryAxis": [
              "min",
              "median",
              "avg",
              "perc75",
              "perc90",
              "perc95",
              "perc99",
              "max"
            ],
            "categoryAxisLabel": "min,median,avg,perc75,perc90,perc95,perc99,max",
            "valueAxis": [
              "min",
              "median",
              "avg",
              "perc75",
              "perc90",
              "perc95",
              "perc99",
              "max"
            ],
            "valueAxisLabel": "min,median,avg,perc75,perc90,perc95,perc99,max",
            "tooltipVariant": "single"
          },
          "colorPalette": "categorical",
          "valueRepresentation": "absolute",
          "truncationMode": "middle",
          "xAxisLabel": "timeframe",
          "xAxisIsLabelVisible": false,
          "hiddenLegendFields": [],
          "leftYAxisSettings": {
            "isLabelVisible": true,
            "label": "Service request count"
          }
        },
        "singleValue": {
          "showLabel": false,
          "label": "Name",
          "prefixIcon": "",
          "recordField": "value",
          "autoscale": true,
          "alignment": "center",
          "trend": {
            "trendType": "auto",
            "isVisible": true,
            "isLabelVisible": false,
            "isRelative": true,
            "downward": {
              "Default": "var(--dt-colors-charts-apdex-good-default, #1c520a)"
            },
            "upward": {
              "Default": "var(--dt-colors-charts-loglevel-emergency-default, #ae132d)"
            }
          },
          "colorThresholdTarget": "value",
          "sparklineSettings": {
            "showTicks": true,
            "lineType": "linear",
            "variant": "line"
          }
        },
        "table": {
          "rowDensity": "comfortable",
          "enableSparklines": false,
          "hiddenColumns": [],
          "linewrapEnabled": true,
          "lineWrapIds": [
            ["min"],
            ["median"],
            ["avg"],
            ["perc75"],
            ["perc90"],
            ["perc95"],
            ["perc99"],
            ["max"]
          ],
          "monospacedFontEnabled": false,
          "monospacedFontColumns": [
            ["avg"],
            ["max"],
            ["min"],
            ["median"],
            ["perc75"],
            ["perc90"],
            ["perc95"],
            ["perc99"]
          ],
          "columnWidths": {
            "[\"metric3\"]": 144.75057983398438,
            "[\"metric2\"]": 132.75057983398438,
            "[\"timeframe\",\"start\"]": 88.45428466796875,
            "[\"timeframe\",\"end\"]": 88.45428466796875,
            "[\"interval\"]": 45.27430725097656,
            "[\"avg\"]": 100.4646987915039,
            "[\"max\"]": 116.61515808105469,
            "[\"min\"]": 96.28761291503906,
            "[\"median\"]": 113.43576049804688,
            "[\"perc99\"]": 123.01388549804688,
            "[\"perc95\"]": 106.01388549804688,
            "[\"perc90\"]": 126.01388549804688,
            "[\"perc75\"]": 113.01388549804688
          },
          "columnTypeOverrides": [],
          "colorThresholdTarget": "background",
          "enableThresholdInRow": false,
          "selectedColumnForRowThreshold": "thresholdmin"
        },
        "honeycomb": {
          "shape": "hexagon",
          "legend": { "hidden": false, "position": "auto" },
          "displayedFields": [],
          "dataMappings": {},
          "truncationMode": "middle",
          "colorMode": "color-palette",
          "colorPalette": "categorical"
        },
        "histogram": {
          "legend": "auto",
          "yAxis": { "label": "Frequency", "scale": "linear" },
          "colorPalette": "categorical",
          "dataMappings": [
            { "valueAxis": "min", "rangeAxis": "" },
            { "valueAxis": "median", "rangeAxis": "" },
            { "valueAxis": "avg", "rangeAxis": "" },
            { "valueAxis": "perc75", "rangeAxis": "" },
            { "valueAxis": "perc90", "rangeAxis": "" },
            { "valueAxis": "perc95", "rangeAxis": "" },
            { "valueAxis": "perc99", "rangeAxis": "" },
            { "valueAxis": "max", "rangeAxis": "" }
          ],
          "variant": "single",
          "truncationMode": "middle",
          "displayedFields": []
        },
        "autoSelectVisualization": false,
        "unitsOverrides": [
          {
            "identifier": "metric",
            "unitCategory": "time",
            "baseUnit": "microsecond",
            "displayUnit": null,
            "decimals": 2,
            "suffix": "",
            "delimiter": false,
            "added": 1733941491874
          },
          {
            "identifier": "value",
            "unitCategory": "time",
            "baseUnit": "microsecond",
            "displayUnit": null,
            "decimals": 2,
            "suffix": "",
            "delimiter": false,
            "added": 1733941499055
          }
        ],
        "recordView": { "fieldsWidth": 242.76 }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      }
    },
    "31": {
      "type": "data",
      "title": "Davis Auto-Baseline Performance Insights by Service",
      "query": "timeseries {avg = avg(dt.service.request.response_time)}\n, by:{dt.entity.service}\n, interval:1m\n// , filter:{if(toBoolean($MZ_Override),in(entityAttr(dt.entity.service,\"managementZones\"),$App),\n// else:if($Service != \"\",matchesPhrase(entityName(dt.entity.service),$Service),else:false))}\n, filter: {if(toBoolean($MZ_Override), \n    if(stringLength($Endpoint) > 0,\n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else:\n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and in(entityAttr(dt.entity.service, \"managementZones\"), $App), \n      else: \n        in(entityAttr(dt.entity.service, \"managementZones\"), $App)\n      )\n    ), \n  else: \n    if(stringLength($Endpoint) > 0, \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else: \n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(entityName(dt.entity.service), $Service), \n      else: \n        matchesPhrase(entityName(dt.entity.service), $Service)\n      )\n    )\n  )}\n| fieldsAdd name = entityName(dt.entity.service)",
      "davis": {
        "enabled": true,
        "componentState": {
          "selectedAnalyzerName": "dt.statistics.ui.anomaly_detection.AutoAdaptiveAnomalyDetectionAnalyzer",
          "inputData": {
            "dt.statistics.ui.anomaly_detection.AutoAdaptiveAnomalyDetectionAnalyzer": {
              "generalParameters": {
                "timeframe": {
                  "startTime": "2025-01-07T20:18:00.000Z",
                  "endTime": "2025-01-14T20:18:00.000Z"
                },
                "resolveDimensionalQueryData": true,
                "logVerbosity": "INFO"
              },
              "numberOfSignalFluctuations": 1,
              "alertCondition": "ABOVE",
              "alertOnMissingData": false,
              "violatingSamples": 3,
              "slidingWindow": 5,
              "dealertingSamples": 5,
              "query": "timeseries {avg = avg(dt.service.request.response_time)}\n, by:{dt.entity.service}\n, interval:1m\n// , filter:{if(toBoolean($MZ_Override),in(entityAttr(dt.entity.service,\"managementZones\"),$App),\n// else:if($Service != \"\",matchesPhrase(entityName(dt.entity.service),$Service),else:false))}\n, filter: {if(toBoolean(\"true\"), \n    if(stringLength(\"\") > 0,\n      if(toBoolean(\"false\"), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, \"\"), \n      else:\n        matchesPhrase(endpoint.name, \"\")\n      ), \n    else: \n      if(toBoolean(\"false\"), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and in(entityAttr(dt.entity.service, \"managementZones\"), \"Cloud: AWS\"), \n      else: \n        in(entityAttr(dt.entity.service, \"managementZones\"), \"Cloud: AWS\")\n      )\n    ), \n  else: \n    if(stringLength(\"\") > 0, \n      if(toBoolean(\"false\"), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, \"\"), \n      else: \n        matchesPhrase(endpoint.name, \"\")\n      ), \n    else: \n      if(toBoolean(\"false\"), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(entityName(dt.entity.service), \"\"), \n      else: \n        matchesPhrase(entityName(dt.entity.service), \"\")\n      )\n    )\n  )}\n| fieldsAdd name = entityName(dt.entity.service)"
            }
          }
        },
        "davisVisualization": {
          "isAvailable": true,
          "selectedOutputs": [
            "1112848820",
            "886519930",
            "1039399041",
            "1194693316",
            "856224669",
            "620787884",
            "-1608067782",
            "724517224",
            "311079573",
            "1859179492",
            "1781420580",
            "-1602617846",
            "-270017229",
            "1717490352",
            "605043999",
            "-2069792029",
            "1699865599",
            "-1531208183",
            "-812171667",
            "1711080058",
            "1838979663",
            "500380041",
            "-1215404862",
            "794878060",
            "-877139433",
            "608995741",
            "859955021",
            "-1280784085",
            "532647203",
            "-1684488583",
            "-1640699086",
            "-1429786988",
            "1781440141",
            "1551855039",
            "-1592667407",
            "293563444",
            "1419246682",
            "1670333511",
            "414072613",
            "119309663",
            "363024507",
            "-1208842415",
            "567906074",
            "315229465",
            "-1745684720",
            "680480560",
            "-758118413",
            "2141601342",
            "-1765821959",
            "-1778803593",
            "-1326400000",
            "-1226097255",
            "1789458622",
            "-973849942",
            "-958705998",
            "62963150",
            "-2109091309",
            "1076593879",
            "1101223119",
            "1965241637",
            "1506298235",
            "-1908304831",
            "-358252863",
            "1303266503",
            "-1768412591",
            "-80352131",
            "1314685435",
            "780749804",
            "142589561",
            "-1329927757",
            "1657044500",
            "-1975157793",
            "1028381093",
            "-2079066595",
            "109668434",
            "-1603416454",
            "-1978066005",
            "-1276497849",
            "290451908",
            "-1688162265",
            "1361026578",
            "808206824",
            "546162722",
            "-1875374191",
            "-296261742",
            "-62878163",
            "99492045",
            "-912506521",
            "-1834776329",
            "831879074",
            "36657217",
            "2057309994",
            "303849932",
            "-499233512",
            "-1949234859",
            "1234739005",
            "41323947",
            "1799628998",
            "52168071",
            "-250569415",
            "1693933166",
            "537628938",
            "1505711987",
            "542154746",
            "-1800668216",
            "2104521094",
            "-1874600475",
            "475967086",
            "-450932525",
            "1443481382",
            "-288121993",
            "-147198692"
          ]
        }
      },
      "visualization": "davis",
      "visualizationSettings": {
        "thresholds": [
          {
            "id": 1,
            "field": "threshold",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 0,
                "color": {
                  "Default": "var(--dt-colors-charts-status-ideal-default, #2f6863)"
                },
                "comparator": "=",
                "label": "",
                "value": 1
              },
              {
                "id": 1,
                "color": {
                  "Default": "var(--dt-colors-charts-loglevel-emergency-default, #ae132d)"
                },
                "comparator": "=",
                "label": "",
                "value": 0
              }
            ]
          },
          {
            "id": 5,
            "field": "Perf Budget",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 0,
                "color": {
                  "Default": "var(--dt-colors-charts-status-ideal-default, #2f6863)"
                },
                "comparator": "≥",
                "label": "",
                "value": 0.1
              },
              {
                "id": 1,
                "color": {
                  "Default": "var(--dt-colors-charts-status-warning-default, #eca440)"
                },
                "comparator": ">",
                "label": "",
                "value": 0
              },
              {
                "id": 2,
                "color": {
                  "Default": "var(--dt-colors-charts-status-critical-default, #c4233b)"
                },
                "comparator": "<",
                "label": "",
                "value": 0
              }
            ]
          }
        ],
        "chartSettings": {
          "xAxisScaling": "analyzedTimeframe",
          "gapPolicy": "gap",
          "circleChartSettings": {
            "groupingThresholdType": "relative",
            "groupingThresholdValue": 0,
            "valueType": "relative"
          },
          "categoryOverrides": {},
          "curve": "linear",
          "pointsDisplay": "auto",
          "categoricalBarChartSettings": {
            "layout": "horizontal",
            "categoryAxisTickLayout": "horizontal",
            "scale": "absolute",
            "groupMode": "stacked",
            "colorPaletteMode": "multi-color",
            "categoryAxis": ["dt.entity.service"],
            "categoryAxisLabel": "dt.entity.service",
            "valueAxis": ["interval"],
            "valueAxisLabel": "interval",
            "tooltipVariant": "single"
          },
          "colorPalette": "categorical",
          "valueRepresentation": "absolute",
          "truncationMode": "middle",
          "xAxisLabel": "timeframe",
          "xAxisIsLabelVisible": false,
          "hiddenLegendFields": [],
          "leftYAxisSettings": {
            "isLabelVisible": true,
            "label": "Service request count"
          },
          "bandChartSettings": {
            "lower": "avg",
            "upper": "median",
            "time": "timeframe"
          },
          "fieldMapping": {
            "timestamp": "timeframe",
            "leftAxisValues": ["avg", "median"]
          }
        },
        "singleValue": {
          "showLabel": false,
          "label": "Name",
          "prefixIcon": "",
          "recordField": "value",
          "autoscale": true,
          "alignment": "center",
          "trend": {
            "trendType": "auto",
            "isVisible": true,
            "isLabelVisible": false,
            "isRelative": true,
            "downward": {
              "Default": "var(--dt-colors-charts-apdex-good-default, #1c520a)"
            },
            "upward": {
              "Default": "var(--dt-colors-charts-loglevel-emergency-default, #ae132d)"
            }
          },
          "colorThresholdTarget": "value",
          "sparklineSettings": {
            "showTicks": true,
            "lineType": "linear",
            "variant": "line"
          }
        },
        "table": {
          "rowDensity": "condensed",
          "enableSparklines": false,
          "hiddenColumns": [["threshold"]],
          "linewrapEnabled": false,
          "lineWrapIds": [
            ["Name"],
            ["Perf SLO"],
            ["Perf Budget"],
            ["AVG"],
            ["dt.entity.service"]
          ],
          "monospacedFontEnabled": false,
          "monospacedFontColumns": [],
          "columnWidths": {
            "[\"entity.name\"]": 190.08593750000003,
            "[\"Name\"]": 195.20834350585938,
            "[\"Status\"]": 104.09375,
            "[\"dt.entity.service\"]": 75.11175537109375,
            "[\"Remaining_error_budget\"]": 136.03030395507812,
            "[\"SLO\"]": 74.71780395507812,
            "[\"Budget\"]": 103.38068389892578
          },
          "columnTypeOverrides": [],
          "enableThresholdInRow": true,
          "sortBy": { "columnId": "[\"Perf SLO\"]", "direction": "ascending" },
          "colorThresholdTarget": "background",
          "selectedColumnForRowThreshold": "threshold"
        },
        "honeycomb": {
          "shape": "hexagon",
          "legend": { "hidden": false, "position": "auto" },
          "displayedFields": ["dt.entity.service"],
          "dataMappings": { "value": "dt.entity.service" },
          "truncationMode": "middle",
          "colorMode": "color-palette",
          "colorPalette": "categorical"
        },
        "histogram": {
          "legend": "auto",
          "yAxis": { "label": "Frequency", "scale": "linear" },
          "colorPalette": "categorical",
          "dataMappings": [{ "valueAxis": "interval", "rangeAxis": "" }],
          "variant": "single",
          "truncationMode": "middle",
          "displayedFields": ["dt.entity.service"]
        },
        "autoSelectVisualization": false,
        "unitsOverrides": [
          {
            "identifier": "AVG",
            "unitCategory": "time",
            "baseUnit": "microsecond",
            "displayUnit": null,
            "decimals": 2,
            "suffix": "",
            "delimiter": false,
            "added": 1734046759478
          }
        ],
        "recordView": { "fieldsWidth": 200.67 }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      }
    },
    "32": {
      "type": "data",
      "title": "Davis Auto-Baseline Availability Insights by Service",
      "query": "timeseries \ntotal = sum(dt.service.request.count)\n,failures=sum(dt.service.request.failure_count)\n, interval:1m\n, by:{dt.entity.service,endpoint.name}\n, filter:{\n  if(toBoolean($MZ_Override), \n    if(stringLength($Endpoint) > 0, \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else:\n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and in(entityAttr(dt.entity.service, \"managementZones\"), $App), \n      else: \n        in(entityAttr(dt.entity.service, \"managementZones\"), $App)\n      )\n    ), \n  else: \n    if(stringLength($Endpoint) > 0, \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else: \n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(entityName(dt.entity.service), $Service), \n      else: \n        matchesPhrase(entityName(dt.entity.service), $Service)\n      )\n    )\n  )\n}\n| summarize total = sum(total[]), failures = sum(failures[])\n,by:{timeframe,interval,dt.entity.service} \n//Availability SLI\n| fieldsAdd availability_good = total[]-failures[]\n| fieldsAdd availability = ((availability_good[])/total[])*(100)\n| fieldsAdd name = entityName(dt.entity.service)\n| fields name, dt.entity.service, availability, interval, timeframe\n// | fieldsAdd Error_budget = (1 - (toDouble($Target)/100))\n// | fieldsAdd avail_rate_consumed = (1 - (arrayAvg(availability_sli)/100))\n// | fieldsAdd threshold = if(arrayAvg(availability_sli) >= toDouble($Target),1,else:0)\n// | fields `Name` = entityName(dt.entity.service),\n// `Avail SLO` = arrayAvg(availability_sli), `Avail Budget` = (Error_budget - avail_rate_consumed) * 100,\n// `Successful Requests` = arraySum(availability_good), `Failed Requests` = arraySum(failures),dt.entity.service, threshold\n// | fieldsAdd link = concat(\"[mda]\",\"(\",$MDA,\")\")\n// | fieldsAdd link = replaceString(link,\"{{`{{SERVICE_ID}}`}}\",dt.entity.service)\n// | fieldsAdd link = replaceString(link,\"{{`{{METRIC}}`}}\",\"FAILURE_RATE\")\n// | fieldsAdd link = replaceString(link,\"{{`{{FROM}}`}}\",toString($dt_timeframe_from))\n// | fieldsAdd link = replaceString(link,\"{{`{{TO}}`}}\",toString($dt_timeframe_to))\n// | sort `Avail SLO` asc",
      "davis": {
        "enabled": true,
        "componentState": {
          "selectedAnalyzerName": "dt.statistics.ui.anomaly_detection.AutoAdaptiveAnomalyDetectionAnalyzer",
          "inputData": {
            "dt.statistics.ui.anomaly_detection.AutoAdaptiveAnomalyDetectionAnalyzer": {
              "generalParameters": {
                "timeframe": {
                  "startTime": "2025-01-07T20:18:00.000Z",
                  "endTime": "2025-01-14T20:18:00.000Z"
                },
                "resolveDimensionalQueryData": true,
                "logVerbosity": "INFO"
              },
              "numberOfSignalFluctuations": 1,
              "alertCondition": "BELOW",
              "alertOnMissingData": false,
              "violatingSamples": 3,
              "slidingWindow": 5,
              "dealertingSamples": 5,
              "query": "timeseries \ntotal = sum(dt.service.request.count)\n,failures=sum(dt.service.request.failure_count)\n, interval:1m\n, by:{dt.entity.service,endpoint.name}\n, filter:{\n  if(toBoolean(\"true\"), \n    if(stringLength(\"\") > 0, \n      if(toBoolean(\"false\"), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, \"\"), \n      else:\n        matchesPhrase(endpoint.name, \"\")\n      ), \n    else: \n      if(toBoolean(\"false\"), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and in(entityAttr(dt.entity.service, \"managementZones\"), \"Cloud: AWS\"), \n      else: \n        in(entityAttr(dt.entity.service, \"managementZones\"), \"Cloud: AWS\")\n      )\n    ), \n  else: \n    if(stringLength(\"\") > 0, \n      if(toBoolean(\"false\"), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, \"\"), \n      else: \n        matchesPhrase(endpoint.name, \"\")\n      ), \n    else: \n      if(toBoolean(\"false\"), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(entityName(dt.entity.service), \"\"), \n      else: \n        matchesPhrase(entityName(dt.entity.service), \"\")\n      )\n    )\n  )\n}\n| summarize total = sum(total[]), failures = sum(failures[])\n,by:{timeframe,interval,dt.entity.service} \n//Availability SLI\n| fieldsAdd availability_good = total[]-failures[]\n| fieldsAdd availability = ((availability_good[])/total[])*(100)\n| fieldsAdd name = entityName(dt.entity.service)\n| fields name, dt.entity.service, availability, interval, timeframe\n// | fieldsAdd Error_budget = (1 - (toDouble($Target)/100))\n// | fieldsAdd avail_rate_consumed = (1 - (arrayAvg(availability_sli)/100))\n// | fieldsAdd threshold = if(arrayAvg(availability_sli) >= toDouble($Target),1,else:0)\n// | fields `Name` = entityName(dt.entity.service),\n// `Avail SLO` = arrayAvg(availability_sli), `Avail Budget` = (Error_budget - avail_rate_consumed) * 100,\n// `Successful Requests` = arraySum(availability_good), `Failed Requests` = arraySum(failures),dt.entity.service, threshold\n// | fieldsAdd link = concat(\"[mda]\",\"(\",$MDA,\")\")\n// | fieldsAdd link = replaceString(link,\"{{`{{SERVICE_ID}}`}}\",dt.entity.service)\n// | fieldsAdd link = replaceString(link,\"{{`{{METRIC}}`}}\",\"FAILURE_RATE\")\n// | fieldsAdd link = replaceString(link,\"{{`{{FROM}}`}}\",toString($dt_timeframe_from))\n// | fieldsAdd link = replaceString(link,\"{{`{{TO}}`}}\",toString($dt_timeframe_to))\n// | sort `Avail SLO` asc"
            }
          }
        },
        "davisVisualization": {
          "isAvailable": true,
          "selectedOutputs": ["1837543844"]
        }
      },
      "visualization": "davis",
      "visualizationSettings": {
        "thresholds": [
          {
            "id": 4,
            "field": "threshold",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 0,
                "color": {
                  "Default": "var(--dt-colors-charts-status-ideal-default, #2f6863)"
                },
                "comparator": "=",
                "label": "",
                "value": 1
              },
              {
                "id": 1,
                "color": {
                  "Default": "var(--dt-colors-charts-loglevel-emergency-default, #ae132d)"
                },
                "comparator": "=",
                "label": "",
                "value": 0
              }
            ]
          },
          {
            "id": 6,
            "field": "Avail Budget",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 0,
                "color": {
                  "Default": "var(--dt-colors-charts-status-ideal-default, #2f6863)"
                },
                "comparator": "≥",
                "label": "",
                "value": 0.1
              },
              {
                "id": 1,
                "color": {
                  "Default": "var(--dt-colors-charts-status-warning-default, #eca440)"
                },
                "comparator": ">",
                "label": "",
                "value": 0
              },
              {
                "id": 2,
                "color": {
                  "Default": "var(--dt-colors-charts-status-critical-default, #c4233b)"
                },
                "comparator": "<",
                "label": "",
                "value": 0
              }
            ]
          }
        ],
        "chartSettings": {
          "xAxisScaling": "analyzedTimeframe",
          "gapPolicy": "gap",
          "circleChartSettings": {
            "groupingThresholdType": "relative",
            "groupingThresholdValue": 0,
            "valueType": "relative"
          },
          "categoryOverrides": {},
          "curve": "linear",
          "pointsDisplay": "auto",
          "categoricalBarChartSettings": {
            "layout": "horizontal",
            "categoryAxisTickLayout": "horizontal",
            "scale": "absolute",
            "groupMode": "stacked",
            "colorPaletteMode": "multi-color",
            "categoryAxis": ["name", "dt.entity.service"],
            "categoryAxisLabel": "name,dt.entity.service",
            "valueAxis": ["interval"],
            "valueAxisLabel": "interval",
            "tooltipVariant": "single"
          },
          "colorPalette": "categorical",
          "valueRepresentation": "absolute",
          "truncationMode": "middle",
          "xAxisLabel": "timeframe",
          "xAxisIsLabelVisible": false,
          "hiddenLegendFields": [],
          "leftYAxisSettings": {
            "isLabelVisible": true,
            "label": "Service request count"
          },
          "fieldMapping": {
            "timestamp": "timeframe",
            "leftAxisValues": ["availability"]
          }
        },
        "singleValue": {
          "showLabel": false,
          "label": "Name",
          "prefixIcon": "",
          "recordField": "value",
          "autoscale": true,
          "alignment": "center",
          "trend": {
            "trendType": "auto",
            "isVisible": true,
            "isLabelVisible": false,
            "isRelative": true,
            "downward": {
              "Default": "var(--dt-colors-charts-apdex-good-default, #1c520a)"
            },
            "upward": {
              "Default": "var(--dt-colors-charts-loglevel-emergency-default, #ae132d)"
            }
          },
          "colorThresholdTarget": "value",
          "sparklineSettings": {
            "showTicks": true,
            "lineType": "linear",
            "variant": "line"
          }
        },
        "table": {
          "rowDensity": "condensed",
          "enableSparklines": false,
          "hiddenColumns": [["threshold"]],
          "linewrapEnabled": false,
          "lineWrapIds": [
            ["Name"],
            ["Avail SLO"],
            ["Avail Budget"],
            ["dt.entity.service"]
          ],
          "monospacedFontEnabled": false,
          "monospacedFontColumns": [],
          "columnWidths": {
            "[\"entity.name\"]": 190.08593750000003,
            "[\"Name\"]": 166.20834350585938,
            "[\"Status\"]": 104.09375,
            "[\"dt.entity.service\"]": 75.11175537109375,
            "[\"Remaining_error_budget\"]": 136.03030395507812,
            "[\"SLO\"]": 74.71780395507812,
            "[\"Budget\"]": 103.38068389892578
          },
          "columnTypeOverrides": [
            {
              "fields": ["availability"],
              "value": "sparkline",
              "id": 1736866459665
            }
          ],
          "enableThresholdInRow": true,
          "sortBy": { "columnId": "[\"Avail SLO\"]", "direction": "ascending" },
          "colorThresholdTarget": "background",
          "selectedColumnForRowThreshold": "threshold"
        },
        "honeycomb": {
          "shape": "hexagon",
          "legend": { "hidden": false, "position": "auto" },
          "displayedFields": ["name", "dt.entity.service"],
          "dataMappings": { "value": "name" },
          "truncationMode": "middle",
          "colorMode": "color-palette",
          "colorPalette": "categorical"
        },
        "histogram": {
          "legend": "auto",
          "yAxis": { "label": "Frequency", "scale": "linear" },
          "colorPalette": "categorical",
          "dataMappings": [{ "valueAxis": "interval", "rangeAxis": "" }],
          "variant": "single",
          "truncationMode": "middle",
          "displayedFields": ["name"]
        },
        "autoSelectVisualization": false,
        "unitsOverrides": [
          {
            "identifier": "AVG",
            "unitCategory": "time",
            "baseUnit": "microsecond",
            "displayUnit": null,
            "decimals": 2,
            "suffix": "",
            "delimiter": false,
            "added": 1734046759478
          }
        ],
        "recordView": { "fieldsWidth": 200.67 }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      }
    },
    "33": {
      "type": "data",
      "title": "Davis Auto-Baseline Performance Insights by Endpoint",
      "query": "timeseries avg = avg(dt.service.request.response_time)\n, by:{endpoint.name,dt.entity.service}\n, interval:1m\n, filter: {if(toBoolean($MZ_Override), \n    if(stringLength($Endpoint) > 0, \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\"))  \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else:\n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and in(entityAttr(dt.entity.service, \"managementZones\"), $App), \n      else: \n        in(entityAttr(dt.entity.service, \"managementZones\"), $App)\n      )\n    ), \n  else: \n    if(stringLength($Endpoint) > 0, \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else: \n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(entityName(dt.entity.service), $Service), \n      else: \n        matchesPhrase(entityName(dt.entity.service), $Service)\n      )\n    )\n  )}\n| fieldsAdd name = entityName(dt.entity.service)",
      "davis": {
        "enabled": true,
        "componentState": {
          "selectedAnalyzerName": "dt.statistics.ui.anomaly_detection.AutoAdaptiveAnomalyDetectionAnalyzer",
          "inputData": {
            "dt.statistics.ui.anomaly_detection.AutoAdaptiveAnomalyDetectionAnalyzer": {
              "generalParameters": {
                "timeframe": {
                  "startTime": "2025-01-07T20:18:00.000Z",
                  "endTime": "2025-01-14T20:18:00.000Z"
                },
                "resolveDimensionalQueryData": true,
                "logVerbosity": "INFO"
              },
              "numberOfSignalFluctuations": 1,
              "alertCondition": "ABOVE",
              "alertOnMissingData": false,
              "violatingSamples": 3,
              "slidingWindow": 5,
              "dealertingSamples": 5,
              "query": "timeseries avg = avg(dt.service.request.response_time)\n, by:{endpoint.name,dt.entity.service}\n, interval:1m\n, filter: {if(toBoolean(\"true\"), \n    if(stringLength(\"\") > 0, \n      if(toBoolean(\"false\"), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\"))  \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, \"\"), \n      else:\n        matchesPhrase(endpoint.name, \"\")\n      ), \n    else: \n      if(toBoolean(\"false\"), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and in(entityAttr(dt.entity.service, \"managementZones\"), \"Cloud: AWS\"), \n      else: \n        in(entityAttr(dt.entity.service, \"managementZones\"), \"Cloud: AWS\")\n      )\n    ), \n  else: \n    if(stringLength(\"\") > 0, \n      if(toBoolean(\"false\"), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, \"\"), \n      else: \n        matchesPhrase(endpoint.name, \"\")\n      ), \n    else: \n      if(toBoolean(\"false\"), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(entityName(dt.entity.service), \"\"), \n      else: \n        matchesPhrase(entityName(dt.entity.service), \"\")\n      )\n    )\n  )}\n| fieldsAdd name = entityName(dt.entity.service)"
            }
          }
        },
        "davisVisualization": {
          "isAvailable": true,
          "selectedOutputs": [
            "1850082858",
            "-483892828",
            "-57791427",
            "404886298",
            "36273057",
            "2094015538",
            "-1287811868",
            "-1705393674",
            "-1273128535",
            "1205747194",
            "351147962",
            "1312240148",
            "1340406347",
            "1501588398",
            "183513823",
            "-1449853285",
            "804134911",
            "693262773",
            "-461062447",
            "442390436",
            "-1187428433",
            "-1915349451",
            "-58093476",
            "-175594382",
            "-519593241",
            "1024337313",
            "1260876273",
            "-1708995757",
            "1266402395",
            "-536222907",
            "-682757140",
            "2104517962",
            "-2020054351",
            "-969523649",
            "-839205939",
            "-1817558102",
            "-1968565820",
            "1199348407",
            "-1719778535",
            "-1005780321",
            "1348764163",
            "1450355565",
            "727287556",
            "-1004136283",
            "-1693521074",
            "-1472553170",
            "-760817781",
            "712664416",
            "-2059255867",
            "-1274162041",
            "433077854",
            "1202974621",
            "-557212960",
            "1597419892",
            "-816783252",
            "-1599652912",
            "-756033173",
            "1997017127",
            "-972784337",
            "146115865",
            "-141235965",
            "397211773",
            "-242418179",
            "278514231",
            "1318201453",
            "-529869119",
            "242344067",
            "-242448142",
            "-775756987",
            "477273547",
            "-1101732406",
            "262962207",
            "-1354327911",
            "457926945",
            "1424450252",
            "-1428550748",
            "224225491",
            "282734263",
            "1035162650",
            "-422042669",
            "413619468",
            "-338103946",
            "-978554628",
            "1439578925",
            "988748684",
            "554391313",
            "1172815985",
            "-930248297",
            "-698836985",
            "-160788100",
            "1539880061",
            "1291226356",
            "1946855186",
            "1942853702",
            "1903282921",
            "-1956303871",
            "922400467",
            "2094673368",
            "-708947593",
            "-1585476475",
            "-1368402128",
            "-1436238060",
            "-816228341",
            "1280952868",
            "1711795094",
            "-764203752",
            "-973198247",
            "122062640",
            "1696850603",
            "1349841784",
            "498824583",
            "2032851394",
            "-1614603296"
          ]
        }
      },
      "visualization": "davis",
      "visualizationSettings": {
        "thresholds": [
          {
            "id": 3,
            "field": "threshold",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 0,
                "color": {
                  "Default": "var(--dt-colors-charts-status-ideal-default, #2f6863)"
                },
                "comparator": "=",
                "label": "",
                "value": 1
              },
              {
                "id": 1,
                "color": {
                  "Default": "var(--dt-colors-charts-loglevel-emergency-default, #ae132d)"
                },
                "comparator": "=",
                "label": "",
                "value": 0
              }
            ]
          },
          {
            "id": 5,
            "field": "Perf Budget",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 0,
                "color": {
                  "Default": "var(--dt-colors-charts-status-ideal-default, #2f6863)"
                },
                "comparator": "≥",
                "label": "",
                "value": 0.1
              },
              {
                "id": 1,
                "color": {
                  "Default": "var(--dt-colors-charts-status-warning-default, #eca440)"
                },
                "comparator": ">",
                "label": "",
                "value": 0
              },
              {
                "id": 2,
                "color": {
                  "Default": "var(--dt-colors-charts-status-critical-default, #c4233b)"
                },
                "comparator": "<",
                "label": "",
                "value": 0
              }
            ]
          }
        ],
        "chartSettings": {
          "xAxisScaling": "analyzedTimeframe",
          "gapPolicy": "gap",
          "circleChartSettings": {
            "groupingThresholdType": "relative",
            "groupingThresholdValue": 0,
            "valueType": "relative"
          },
          "categoryOverrides": {},
          "curve": "linear",
          "pointsDisplay": "auto",
          "categoricalBarChartSettings": {
            "layout": "horizontal",
            "categoryAxisTickLayout": "horizontal",
            "scale": "absolute",
            "groupMode": "stacked",
            "colorPaletteMode": "multi-color",
            "categoryAxis": ["endpoint.name", "dt.entity.service", "name"],
            "categoryAxisLabel": "endpoint.name,dt.entity.service,name",
            "valueAxis": ["interval"],
            "valueAxisLabel": "interval",
            "tooltipVariant": "single"
          },
          "colorPalette": "categorical",
          "valueRepresentation": "absolute",
          "truncationMode": "middle",
          "xAxisLabel": "timeframe",
          "xAxisIsLabelVisible": false,
          "hiddenLegendFields": [],
          "leftYAxisSettings": {
            "isLabelVisible": true,
            "label": "Service request count"
          },
          "fieldMapping": {
            "timestamp": "timeframe",
            "leftAxisValues": ["avg"]
          }
        },
        "singleValue": {
          "showLabel": false,
          "label": "Name",
          "prefixIcon": "",
          "recordField": "value",
          "autoscale": true,
          "alignment": "center",
          "trend": {
            "trendType": "auto",
            "isVisible": true,
            "isLabelVisible": false,
            "isRelative": true,
            "downward": {
              "Default": "var(--dt-colors-charts-apdex-good-default, #1c520a)"
            },
            "upward": {
              "Default": "var(--dt-colors-charts-loglevel-emergency-default, #ae132d)"
            }
          },
          "colorThresholdTarget": "value",
          "sparklineSettings": {
            "showTicks": true,
            "lineType": "linear",
            "variant": "line"
          }
        },
        "table": {
          "rowDensity": "condensed",
          "enableSparklines": false,
          "hiddenColumns": [["threshold"]],
          "linewrapEnabled": false,
          "lineWrapIds": [
            ["Endpoint"],
            ["Perf SLO"],
            ["Perf Budget"],
            ["AVG"],
            ["dt.entity.service"]
          ],
          "monospacedFontEnabled": false,
          "monospacedFontColumns": [],
          "columnWidths": {
            "[\"entity.name\"]": 190.08593750000003,
            "[\"endpoint.name\"]": 300.4583435058594,
            "[\"Endpoint\"]": 175.58334350585938
          },
          "columnTypeOverrides": [
            { "fields": ["avg"], "value": "sparkline", "id": 1736866920186 }
          ],
          "enableThresholdInRow": true,
          "sortBy": { "columnId": "[\"Perf SLO\"]", "direction": "ascending" },
          "colorThresholdTarget": "background",
          "selectedColumnForRowThreshold": "threshold"
        },
        "honeycomb": {
          "shape": "hexagon",
          "legend": { "hidden": false, "position": "auto" },
          "displayedFields": ["endpoint.name", "dt.entity.service", "name"],
          "dataMappings": { "value": "endpoint.name" },
          "truncationMode": "middle",
          "colorMode": "color-palette",
          "colorPalette": "categorical"
        },
        "histogram": {
          "legend": "auto",
          "yAxis": { "label": "Frequency", "scale": "linear" },
          "colorPalette": "categorical",
          "dataMappings": [{ "valueAxis": "interval", "rangeAxis": "" }],
          "variant": "single",
          "truncationMode": "middle",
          "displayedFields": ["dt.entity.service"]
        },
        "autoSelectVisualization": false,
        "unitsOverrides": [
          {
            "identifier": "AVG",
            "unitCategory": "time",
            "baseUnit": "microsecond",
            "displayUnit": null,
            "decimals": 2,
            "suffix": "",
            "delimiter": false,
            "added": 1734017015396
          }
        ],
        "recordView": { "fieldsWidth": 200.67 }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      }
    },
    "34": {
      "type": "data",
      "title": "Davis Auto-Baseline Availability Insights by Endpoint",
      "query": "timeseries \ntotal = sum(dt.service.request.count)\n,failures=sum(dt.service.request.failure_count)\n, interval:1m\n, by:{dt.entity.service,endpoint.name}\n, filter:{\n  if(toBoolean($MZ_Override), \n    if(stringLength($Endpoint) > 0, \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else:\n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and in(entityAttr(dt.entity.service, \"managementZones\"), $App), \n      else: \n        in(entityAttr(dt.entity.service, \"managementZones\"), $App)\n      )\n    ), \n  else: \n    if(stringLength($Endpoint) > 0, \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, $Endpoint), \n      else: \n        matchesPhrase(endpoint.name, $Endpoint)\n      ), \n    else: \n      if(toBoolean($Entrypoint), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(entityName(dt.entity.service), $Service), \n      else: \n        matchesPhrase(entityName(dt.entity.service), $Service)\n      )\n    )\n  )\n}\n| summarize total = sum(total[]), failures = sum(failures[])\n,by:{timeframe,interval,endpoint.name,dt.entity.service} \n//Availability SLI\n| fieldsAdd availability_good = total[]-failures[]\n| fieldsAdd availability = ((availability_good[])/total[])*(100)\n| fieldsAdd name = entityName(dt.entity.service)\n| fields endpoint.name, name, dt.entity.service, availability, interval, timeframe",
      "davis": {
        "enabled": true,
        "componentState": {
          "selectedAnalyzerName": "dt.statistics.ui.anomaly_detection.AutoAdaptiveAnomalyDetectionAnalyzer",
          "inputData": {
            "dt.statistics.ui.anomaly_detection.AutoAdaptiveAnomalyDetectionAnalyzer": {
              "generalParameters": {
                "timeframe": {
                  "startTime": "2025-01-07T20:18:00.000Z",
                  "endTime": "2025-01-14T20:18:00.000Z"
                },
                "resolveDimensionalQueryData": true,
                "logVerbosity": "INFO"
              },
              "numberOfSignalFluctuations": 1,
              "alertCondition": "BELOW",
              "alertOnMissingData": false,
              "violatingSamples": 3,
              "slidingWindow": 5,
              "dealertingSamples": 5,
              "query": "timeseries \ntotal = sum(dt.service.request.count)\n,failures=sum(dt.service.request.failure_count)\n, interval:1m\n, by:{dt.entity.service,endpoint.name}\n, filter:{\n  if(toBoolean(\"true\"), \n    if(stringLength(\"\") > 0, \n      if(toBoolean(\"false\"), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, \"\"), \n      else:\n        matchesPhrase(endpoint.name, \"\")\n      ), \n    else: \n      if(toBoolean(\"false\"), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and in(entityAttr(dt.entity.service, \"managementZones\"), \"Cloud: AWS\"), \n      else: \n        in(entityAttr(dt.entity.service, \"managementZones\"), \"Cloud: AWS\")\n      )\n    ), \n  else: \n    if(stringLength(\"\") > 0, \n      if(toBoolean(\"false\"), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(endpoint.name, \"\"), \n      else: \n        matchesPhrase(endpoint.name, \"\")\n      ), \n    else: \n      if(toBoolean(\"false\"), \n        isNull(entityAttr(dt.entity.service, \"called_by\")) \n        and isNotNull(entityAttr(dt.entity.service, \"calls\")) \n        and isNull(entityAttr(dt.entity.service, \"databaseHostNames\")) \n        and not(in(entityAttr(dt.entity.service, \"serviceType\"), \"RMI_SERVICE\",\"BACKGROUND_ACTIVITY\", \"QUEUE_LISTENER_SERVICE\", \"RPC_SERVICE\")) \n        and matchesPhrase(entityName(dt.entity.service), \"\"), \n      else: \n        matchesPhrase(entityName(dt.entity.service), \"\")\n      )\n    )\n  )\n}\n| summarize total = sum(total[]), failures = sum(failures[])\n,by:{timeframe,interval,endpoint.name,dt.entity.service} \n//Availability SLI\n| fieldsAdd availability_good = total[]-failures[]\n| fieldsAdd availability = ((availability_good[])/total[])*(100)\n| fieldsAdd name = entityName(dt.entity.service)\n| fields endpoint.name, name, dt.entity.service, availability, interval, timeframe"
            }
          }
        },
        "davisVisualization": {
          "isAvailable": true,
          "selectedOutputs": [
            "557915797",
            "-1865085861",
            "741809634",
            "1158455205",
            "1536483070",
            "193218957",
            "1891404059",
            "716564553",
            "-642905610",
            "-710758203",
            "-1049899259",
            "1100069355",
            "-1364443244",
            "650554769",
            "2067099008",
            "-1212934844",
            "700466272",
            "-2025678998",
            "-168152626",
            "938727003",
            "126796464",
            "-1712657686",
            "1001450659",
            "-1397223091",
            "1388807800",
            "-431000322",
            "-924908882",
            "817174412",
            "-1817196668",
            "625266650",
            "226200339",
            "1266664309",
            "-417734162",
            "-770298336",
            "-1546973102",
            "1896485141",
            "-781746117",
            "1185175720",
            "1545404038",
            "-618244672",
            "478013148",
            "-273238862",
            "682095355",
            "-258038150",
            "-503463439",
            "-1886492143",
            "772754004",
            "-1476035553",
            "1751941978",
            "1125066968",
            "-2136940319",
            "1130934142",
            "-1246071137",
            "-367294837",
            "-793071981",
            "-1475681361",
            "2040161396",
            "-733085384",
            "-2008564432",
            "1433990278",
            "399597532",
            "1264196002",
            "560481314",
            "245668136",
            "-2035034190",
            "-1697118242",
            "-112011172",
            "294468813",
            "330026970",
            "-1736537068",
            "-1469852939",
            "228035648",
            "-828581626",
            "436609406",
            "450943027",
            "-1520262565",
            "-304895476",
            "726484136",
            "2018803365",
            "1189835912",
            "-1655869965",
            "-1198249783",
            "-1984905213",
            "1140907250",
            "220002163",
            "498786702",
            "1800340526",
            "-16636472",
            "703092056",
            "-1584451709",
            "1689378210",
            "-71656693",
            "-1589706067",
            "-31052807",
            "-69386058",
            "503945886",
            "-1521607668",
            "1934867111",
            "-1627112984",
            "-981889382",
            "-1370811313",
            "-1152201493",
            "921000404",
            "-378457125",
            "332173993",
            "583394151",
            "-1194361530",
            "1677354063",
            "-918764748",
            "1055738119",
            "-1675188264",
            "-1430989315",
            "-1726694693"
          ]
        }
      },
      "visualization": "davis",
      "visualizationSettings": {
        "thresholds": [
          {
            "id": 4,
            "field": "threshold",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 0,
                "color": {
                  "Default": "var(--dt-colors-charts-status-ideal-default, #2f6863)"
                },
                "comparator": "=",
                "label": "",
                "value": 1
              },
              {
                "id": 2,
                "color": {
                  "Default": "var(--dt-colors-charts-status-critical-default, #c4233b)"
                },
                "comparator": "=",
                "label": "",
                "value": 0
              }
            ]
          },
          {
            "id": 6,
            "field": "Avail Budget",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 0,
                "color": {
                  "Default": "var(--dt-colors-charts-status-ideal-default, #2f6863)"
                },
                "comparator": "≥",
                "label": "",
                "value": 0.1
              },
              {
                "id": 1,
                "color": {
                  "Default": "var(--dt-colors-charts-status-warning-default, #eca440)"
                },
                "comparator": ">",
                "label": "",
                "value": 0
              },
              {
                "id": 2,
                "color": {
                  "Default": "var(--dt-colors-charts-status-critical-default, #c4233b)"
                },
                "comparator": "<",
                "label": "",
                "value": 0
              }
            ]
          }
        ],
        "chartSettings": {
          "xAxisScaling": "analyzedTimeframe",
          "gapPolicy": "gap",
          "circleChartSettings": {
            "groupingThresholdType": "relative",
            "groupingThresholdValue": 0,
            "valueType": "relative"
          },
          "categoryOverrides": {},
          "curve": "linear",
          "pointsDisplay": "auto",
          "categoricalBarChartSettings": {
            "layout": "horizontal",
            "categoryAxisTickLayout": "horizontal",
            "scale": "absolute",
            "groupMode": "stacked",
            "colorPaletteMode": "multi-color",
            "categoryAxis": ["endpoint.name", "name", "dt.entity.service"],
            "categoryAxisLabel": "endpoint.name,name,dt.entity.service",
            "valueAxis": ["interval"],
            "valueAxisLabel": "interval",
            "tooltipVariant": "single"
          },
          "colorPalette": "categorical",
          "valueRepresentation": "absolute",
          "truncationMode": "middle",
          "xAxisLabel": "timeframe",
          "xAxisIsLabelVisible": false,
          "hiddenLegendFields": [],
          "leftYAxisSettings": {
            "isLabelVisible": true,
            "label": "Service request count"
          },
          "fieldMapping": {
            "timestamp": "timeframe",
            "leftAxisValues": ["availability"]
          }
        },
        "singleValue": {
          "showLabel": false,
          "label": "Name",
          "prefixIcon": "",
          "recordField": "value",
          "autoscale": true,
          "alignment": "center",
          "trend": {
            "trendType": "auto",
            "isVisible": true,
            "isLabelVisible": false,
            "isRelative": true,
            "downward": {
              "Default": "var(--dt-colors-charts-apdex-good-default, #1c520a)"
            },
            "upward": {
              "Default": "var(--dt-colors-charts-loglevel-emergency-default, #ae132d)"
            }
          },
          "colorThresholdTarget": "value",
          "sparklineSettings": {
            "showTicks": true,
            "lineType": "linear",
            "variant": "line"
          }
        },
        "table": {
          "rowDensity": "condensed",
          "enableSparklines": false,
          "hiddenColumns": [["threshold"]],
          "linewrapEnabled": false,
          "lineWrapIds": [
            ["Endpoint"],
            ["Avail SLO"],
            ["Avail Budget"],
            ["dt.entity.service"]
          ],
          "monospacedFontEnabled": false,
          "monospacedFontColumns": [],
          "columnWidths": {
            "[\"entity.name\"]": 190.08593750000003,
            "[\"endpoint.name\"]": 300.4583435058594,
            "[\"Endpoint\"]": 139.58334350585938
          },
          "columnTypeOverrides": [
            {
              "fields": ["availability"],
              "value": "sparkline",
              "id": 1736867103496
            }
          ],
          "enableThresholdInRow": true,
          "sortBy": { "columnId": "[\"Avail SLO\"]", "direction": "ascending" },
          "colorThresholdTarget": "background",
          "selectedColumnForRowThreshold": "threshold"
        },
        "honeycomb": {
          "shape": "hexagon",
          "legend": { "hidden": false, "position": "auto" },
          "displayedFields": ["endpoint.name", "name", "dt.entity.service"],
          "dataMappings": { "value": "endpoint.name" },
          "truncationMode": "middle",
          "colorMode": "color-palette",
          "colorPalette": "categorical"
        },
        "histogram": {
          "legend": "auto",
          "yAxis": { "label": "Frequency", "scale": "linear" },
          "colorPalette": "categorical",
          "dataMappings": [{ "valueAxis": "interval", "rangeAxis": "" }],
          "variant": "single",
          "truncationMode": "middle",
          "displayedFields": ["dt.entity.service"]
        },
        "autoSelectVisualization": false,
        "unitsOverrides": [
          {
            "identifier": "AVG",
            "unitCategory": "time",
            "baseUnit": "microsecond",
            "displayUnit": null,
            "decimals": 2,
            "suffix": "",
            "delimiter": false,
            "added": 1734017015396
          }
        ],
        "recordView": { "fieldsWidth": 200.67 }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 1,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      }
    }
  },
  "layouts": {
    "7": { "x": 6, "y": 3, "w": 5, "h": 2 },
    "11": { "x": 0, "y": 3, "w": 6, "h": 4 },
    "14": { "x": 22, "y": 0, "w": 2, "h": 3 },
    "15": { "x": 20, "y": 0, "w": 2, "h": 3 },
    "16": { "x": 18, "y": 0, "w": 2, "h": 3 },
    "17": { "x": 16, "y": 0, "w": 2, "h": 3 },
    "18": { "x": 6, "y": 5, "w": 5, "h": 2 },
    "21": { "x": 12, "y": 7, "w": 6, "h": 4 },
    "22": { "x": 18, "y": 7, "w": 6, "h": 4 },
    "23": { "x": 6, "y": 7, "w": 6, "h": 4 },
    "24": { "x": 0, "y": 7, "w": 6, "h": 4 },
    "25": { "x": 0, "y": 0, "w": 6, "h": 3 },
    "26": { "x": 11, "y": 0, "w": 5, "h": 3 },
    "27": { "x": 6, "y": 0, "w": 5, "h": 3 },
    "28": { "x": 11, "y": 3, "w": 13, "h": 4 },
    "31": { "x": 0, "y": 11, "w": 6, "h": 9 },
    "32": { "x": 6, "y": 11, "w": 6, "h": 9 },
    "33": { "x": 12, "y": 11, "w": 6, "h": 9 },
    "34": { "x": 18, "y": 11, "w": 6, "h": 9 }
  },
  "importedWithCode": false,
  "settings": { "gridLayout": { "mode": "responsive" } }
}
