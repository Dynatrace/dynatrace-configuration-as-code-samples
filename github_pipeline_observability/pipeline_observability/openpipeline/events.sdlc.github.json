{
  "customBasePath": "/platform/ingest/custom/events.sdlc",
  "editable": true,
  "endpoints": [
    {
      "basePath": "/platform/ingest/custom/events.sdlc",
      "builtin": false,
      "defaultBucket": "default_events",
      "displayName": "GitHub",
      "editable": true,
      "enabled": true,
      "processors": [
        {
          "builtin": false,
          "description": "Set event.id to a unique identifier",
          "dqlScript": "fieldsAdd event.id = hashSha1(concat(toString(toLong(now())), toString(RANDOM())))",
          "editable": true,
          "enabled": true,
          "id": "github:event_id_1213",
          "matcher": "isNull(event.id)",
          "sampleData": "",
          "type": "dql"
        },
        {
          "builtin": false,
          "description": "Set default SDLC and pipeline properties",
          "dqlScript": "fieldsAdd \nevent.kind = \"SDLC_EVENT\", \nevent.version = \"0.1.0\",\nevent.provider = \"github.com\",\nevent.category = \"pipeline\",\nevent.type = \"run\"",
          "editable": true,
          "enabled": true,
          "id": "github:sdlc_pipeline_properties_9061",
          "matcher": "isNotNull(workflow_run)",
          "sampleData": "",
          "type": "dql"
        },
        {
          "builtin": false,
          "description": "Set default SDLC and task properties",
          "dqlScript": "fieldsAdd \nevent.kind = \"SDLC_EVENT\", \nevent.version = \"0.1.0\",\nevent.provider = \"github.com\",\nevent.category = \"task\",\nevent.type = \"build\"",
          "editable": true,
          "enabled": true,
          "id": "github:sdlc_build_task_properties_1775",
          "matcher": "isNotNull(workflow_job)",
          "sampleData": "",
          "type": "dql"
        },
        {
          "builtin": false,
          "description": "Set default SDLC properties and type to change",
          "dqlScript": "fieldsAdd \nevent.kind = \"SDLC_EVENT\", \nevent.version = \"0.1.0\",\nevent.provider = \"github.com\",\nevent.category = \"task\",\nevent.type = \"change\"",
          "editable": true,
          "enabled": true,
          "id": "github:sdlc_change_type_properties_2135",
          "matcher": "isNotNull(pull_request)",
          "sampleData": "",
          "type": "dql"
        },
        {
          "builtin": false,
          "description": "Cleanup",
          "editable": true,
          "enabled": false,
          "fields": [
            "action",
            "installation",
            "repository",
            "sender",
            "workflow",
            "workflow_job",
            "workflow_run",
            "pull_request"
          ],
          "id": "github:clean_up_github_properties_8323",
          "matcher": "isNotNull(workflow_run) or isNotNull(workflow_job) or isNotNull(pull_request)",
          "sampleData": "",
          "type": "fieldsRemove"
        }
      ],
      "routing": {
        "type": "dynamic"
      },
      "segment": "github"
    },
    {
      "basePath": "/platform/ingest/v1/events.sdlc",
      "builtin": true,
      "defaultBucket": "default_events",
      "displayName": "Endpoint for Software Development Lifecycle events",
      "editable": false,
      "enabled": true,
      "processors": [
        {
          "builtin": true,
          "description": "sdlc event default fields",
          "editable": false,
          "enabled": true,
          "fields": [
            {
              "name": "event.kind",
              "value": "SDLC_EVENT"
            }
          ],
          "id": "sdlc:ingest_enrichment_map",
          "matcher": "true",
          "sampleData": "",
          "type": "fieldsAdd"
        },
        {
          "builtin": true,
          "description": "Sets start_time to end_time",
          "dqlScript": "fieldsAdd start_time = end_time",
          "editable": false,
          "enabled": true,
          "id": "sdlc:start_time_to_end_time_processor",
          "matcher": "isNull(start_time) AND isNotNull(end_time)",
          "sampleData": "",
          "type": "dql"
        },
        {
          "builtin": true,
          "description": "Sets start_time to current timestamp",
          "dqlScript": "fieldsAdd start_time = now()",
          "editable": false,
          "enabled": true,
          "id": "sdlc:start_time_processor",
          "matcher": "isNull(start_time) AND isNull(end_time)",
          "sampleData": "",
          "type": "dql"
        },
        {
          "builtin": true,
          "description": "Sets end_time to start_time",
          "dqlScript": "fieldsAdd end_time = start_time",
          "editable": false,
          "enabled": true,
          "id": "sdlc:end_time_to_start_time_processor",
          "matcher": "isNull(end_time) AND isNotNull(start_time)",
          "sampleData": "",
          "type": "dql"
        },
        {
          "builtin": true,
          "description": "Sets event.id to a unique identifier",
          "dqlScript": "fieldsAdd event.id = hashSha1(concat(toString(toLong(now())), toString(RANDOM())))",
          "editable": false,
          "enabled": true,
          "id": "sdlc:event_id_processor",
          "matcher": "isNull(event.id)",
          "sampleData": "",
          "type": "dql"
        },
        {
          "builtin": true,
          "description": "Sets event.category to pipeline if conditions match",
          "dqlScript": "fieldsAdd event.category = \"pipeline\"",
          "editable": false,
          "enabled": true,
          "id": "sdlc:event_category_pipeline_processor",
          "matcher": "isNull(event.category) AND (isNotNull(pipeline.id) AND isNull(task.id))",
          "sampleData": "",
          "type": "dql"
        },
        {
          "builtin": true,
          "description": "Sets event.category to task if conditions match",
          "dqlScript": "fieldsAdd event.category = \"task\"",
          "editable": false,
          "enabled": true,
          "id": "sdlc:event_category_task_processor",
          "matcher": "isNull(event.category) AND (isNotNull(task.id) OR (isNull(task.id) AND isNull(pipeline.id)))",
          "sampleData": "",
          "type": "dql"
        }
      ],
      "routing": {
        "type": "dynamic"
      },
      "segment": ""
    }
  ],
  "id": "events.sdlc",
  "pipelines": [
    {
      "builtin": false,
      "dataExtraction": {
        "editable": true,
        "processors": []
      },
      "displayName": "github-workflow",
      "editable": true,
      "enabled": true,
      "id": "github:workflow_6504",
      "metricExtraction": {
        "editable": true,
        "processors": [
          {
            "builtin": false,
            "description": "Number of workflow events",
            "dimensions": [
              "event.status",
              "cicd.pipeline.name",
              "ext.pipeline.head_branch",
              "event.provider",
              "event.category",
              "event.type",
              "vcs.repository.ref.name"
            ],
            "editable": true,
            "enabled": true,
            "id": "github:workflows:number_of_pipeline_events_6061",
            "matcher": "true",
            "metricKey": "events.sdlc.pipelines",
            "sampleData": "",
            "type": "counterMetric"
          },
          {
            "builtin": false,
            "description": "Number of finished workflows",
            "dimensions": [
              "event.status",
              "cicd.pipeline.name",
              "ext.pipeline.head_branch",
              "event.provider",
              "event.category",
              "event.type",
              "vcs.repository.ref.name"
            ],
            "editable": true,
            "enabled": true,
            "id": "github:workflows:runs_finished_4612",
            "matcher": "//isNotNull(workflow_run) AND\nevent.status  == \"finished\"",
            "metricKey": "events.sdlc.finished_pipelines",
            "sampleData": "",
            "type": "counterMetric"
          },
          {
            "builtin": false,
            "description": "Duration of finished workflows",
            "dimensions": [
              "event.status",
              "cicd.pipeline.name",
              "event.provider",
              "event.category",
              "event.type",
              "vcs.repository.ref.name",
              "ext.pipeline.head_branch"
            ],
            "editable": true,
            "enabled": true,
            "field": "duration",
            "id": "github:workflows:run_duration_2861",
            "matcher": "//isNotNull(workflow_run) AND\nevent.status  == \"finished\"",
            "metricKey": "events.sdlc.pipeline_duration",
            "sampleData": "",
            "type": "valueMetric"
          }
        ]
      },
      "processing": {
        "editable": true,
        "processors": [
          {
            "builtin": false,
            "description": "event.status",
            "dqlScript": "parse workflow_run, \"JSON:record_json\" \n| fieldsFlatten record_json, fields:{status} \n| fieldsAdd if(status == \"in_progress\", \"started\", else: if(status == \"completed\", \"finished\", else: status)), alias: event.status\n| fieldsRemove record_json",
            "editable": true,
            "enabled": true,
            "id": "github:workflow:event.status_1279",
            "matcher": "isNotNull(workflow_run)",
            "sampleData": "",
            "type": "dql"
          },
          {
            "builtin": false,
            "description": "duration",
            "dqlScript": "parse workflow_run, \"JSON:record_json\" \n| fieldsFlatten record_json, fields:{updated_at, run_started_at, status} \n| fieldsAdd if((updated_at \u003e run_started_at) and event.status == \"finished\", toTimestamp(updated_at) - toTimestamp(run_started_at), else: toDuration(0)), alias: duration\n| fieldsRemove record_json, status, updated_at, run_started_at",
            "editable": true,
            "enabled": true,
            "id": "github:workflow:duration_3758",
            "matcher": "isNotNull(workflow_run)",
            "sampleData": "",
            "type": "dql"
          },
          {
            "builtin": false,
            "description": "start_time",
            "dqlScript": "parse workflow_run, \"JSON:record_json\" \n| fieldsFlatten record_json, fields:{run_started_at} \n| fieldsAdd start_time = toTimestamp(run_started_at)\n| fieldsRemove record_json, run_started_at",
            "editable": true,
            "enabled": true,
            "id": "github:workflow:start_time_8369",
            "matcher": "isNotNull(workflow_run) //and event.status == \"started\"",
            "sampleData": "",
            "type": "dql"
          },
          {
            "builtin": false,
            "description": "end_time",
            "dqlScript": "parse workflow_run, \"JSON:record_json\" \n| fieldsFlatten record_json, fields:{updated_at} \n| fieldsAdd end_time = toTimestamp(updated_at)\n| fieldsRemove record_json, updated_at",
            "editable": true,
            "enabled": true,
            "id": "github:workflow:end_time_1541",
            "matcher": "isNotNull(workflow_run) and event.status == \"finished\"",
            "sampleData": "",
            "type": "dql"
          },
          {
            "builtin": false,
            "description": "timestamp",
            "dqlScript": "parse workflow_run, \"JSON:record_json\" \n| fieldsFlatten record_json, fields:{updated_at} \n| fieldsAdd dif2h = toLong(7200000000000)\n| fieldsAdd nt = toLong(toTimestamp(now()))\n| fieldsAdd if(nt - toLong(toTimestamp(start_time)) \u003c dif2h, start_time, else: toTimestamp(nt)), alias: st\n| fieldsAdd if(nt - toLong(toTimestamp(end_time)) \u003c dif2h, end_time, else: toTimestamp(nt)), alias: et\n| fieldsAdd if(nt - toLong(toTimestamp(updated_at)) \u003c dif2h, updated_at, else: toTimestamp(nt)), alias: ut\n| fieldsAdd if(event.status == \"started\", st, else: if(event.status == \"finished\", et, else: ut)), alias: timestamp\n| fieldsRemove record_json, updated_at, st, et, ut, nt, dif2h",
            "editable": true,
            "enabled": true,
            "id": "github:workflow:timestamp_3154",
            "matcher": "isNotNull(workflow_run) ",
            "sampleData": "",
            "type": "dql"
          },
          {
            "builtin": false,
            "description": "cicd.pipeline.id | name | url.full",
            "dqlScript": "parse workflow, \"JSON:record_json\" \n| fieldsFlatten record_json, fields:{id, name, html_url} \n| fieldsRename cicd.pipeline.id = id\n| fieldsRename cicd.pipeline.name = name\n| fieldsRename cicd.pipeline.url.full = html_url\n| fieldsRemove record_json",
            "editable": true,
            "enabled": true,
            "id": "github:workflow:pipeline.id_name_url_6138",
            "matcher": "isNotNull(workflow_run) and isNotNull(workflow)",
            "sampleData": "",
            "type": "dql"
          },
          {
            "builtin": false,
            "description": "cicd.pipeline.run.id | url.full",
            "dqlScript": "parse workflow_run, \"JSON:record_json\" \n| fieldsFlatten record_json, fields:{id, html_url} \n| fieldsRename cicd.pipeline.run.id = id\n| fieldsRename cicd.pipeline.run.url.full = html_url\n| fieldsRemove record_json",
            "editable": true,
            "enabled": true,
            "id": "github:workflow:pipeline.run.id_url_5049",
            "matcher": "isNotNull(workflow_run)",
            "sampleData": "",
            "type": "dql"
          },
          {
            "builtin": false,
            "description": "cicd.pipeline.run.trigger | run_attempt",
            "dqlScript": "parse workflow_run, \"JSON:record_json\" \n| fieldsFlatten record_json, fields:{event, run_attempt} \n| fieldsRename cicd.pipeline.run.trigger = event\n| fieldsRename cicd.pipeline.run.attempt = run_attempt\n| fieldsRemove record_json",
            "editable": true,
            "enabled": true,
            "id": "github:workflow:ext.pipeline.run.trigger_run_attempt_9871",
            "matcher": "isNotNull(workflow_run) ",
            "sampleData": "",
            "type": "dql"
          },
          {
            "builtin": false,
            "description": "cicd.pipeline.run.outcome",
            "dqlScript": "parse workflow_run, \"JSON:record_json\" \n| fieldsFlatten record_json, fields:{conclusion} \n| fieldsRename cicd.pipeline.run.outcome = conclusion\n| fieldsRemove record_json, action",
            "editable": true,
            "enabled": true,
            "id": "github:workflow:pipeline.run.outcome_7507",
            "matcher": "isNotNull(workflow_run) and action == \"completed\" or action == \"requested\"",
            "sampleData": "",
            "type": "dql"
          },
          {
            "builtin": false,
            "description": "vcs.repository.name | url.full",
            "dqlScript": "parse repository, \"JSON:record_json\" \n| fieldsFlatten record_json, fields:{full_name, html_url} \n| fieldsRename vcs.repository.name = full_name\n| fieldsRename vcs.repository.url.full = html_url\n| fieldsRemove record_json",
            "editable": true,
            "enabled": true,
            "id": "github:workflow:vcs.repository.name_url_4133",
            "matcher": "isNotNull(repository)",
            "sampleData": "",
            "type": "dql"
          },
          {
            "builtin": false,
            "description": "vcs.ref.head.revision | name",
            "dqlScript": "parse workflow_run, \"JSON:record_json\" \n| fieldsFlatten record_json, fields:{head_branch, head_sha} \n| fieldsRename vcs.ref.head.revision = head_sha\n| fieldsRename vcs.ref.head.name = head_branch\n| fieldsRemove record_json",
            "editable": true,
            "enabled": true,
            "id": "github:workflow:vcs.ref.head.revision_name_2706",
            "matcher": "isNotNull(workflow_run) ",
            "sampleData": "",
            "type": "dql"
          },
          {
            "builtin": false,
            "description": "Cleanup",
            "dqlScript": "fieldsRemove action, workflow_run, workflow, repository, organization, sender, installation",
            "editable": true,
            "enabled": true,
            "id": "github:workflow:remove_fields_3337",
            "matcher": "isNotNull(workflow_run)",
            "sampleData": "",
            "type": "dql"
          }
        ]
      },
      "securityContext": {
        "editable": true,
        "processors": []
      },
      "storage": {
        "catchAllBucketName": "default_events",
        "editable": true,
        "processors": []
      },
      "type": "default"
    },
    {
      "builtin": false,
      "dataExtraction": {
        "editable": true,
        "processors": []
      },
      "displayName": "github-job",
      "editable": true,
      "enabled": true,
      "id": "github:job_9528",
      "metricExtraction": {
        "editable": true,
        "processors": [
          {
            "builtin": false,
            "description": "Number of job events",
            "dimensions": [
              "event.type",
              "event.provider",
              "event.status",
              "event.category",
              "vcs.repository.ref.name",
              "cicd.pipeline.name"
            ],
            "editable": true,
            "enabled": true,
            "id": "github:job:number_of_job_events_4537",
            "matcher": "true",
            "metricKey": "events.sdlc.tasks",
            "sampleData": "",
            "type": "counterMetric"
          },
          {
            "builtin": false,
            "description": "Number of finished jobs",
            "dimensions": [
              "event.type",
              "event.provider",
              "event.status",
              "event.category",
              "vcs.repository.ref.name",
              "cicd.pipeline.name"
            ],
            "editable": true,
            "enabled": true,
            "id": "github:job:jobs_finished_4783",
            "matcher": "event.status == \"finished\"",
            "metricKey": "events.sdlc.finished_tasks",
            "sampleData": "",
            "type": "counterMetric"
          },
          {
            "builtin": false,
            "description": "Duration of finished job",
            "dimensions": [
              "event.provider",
              "event.status",
              "event.category",
              "event.type",
              "cicd.pipeline.name",
              "vcs.repository.ref.name"
            ],
            "editable": true,
            "enabled": true,
            "field": "duration",
            "id": "github:job:job_duration_9361",
            "matcher": "event.status == \"finished\"",
            "metricKey": "events.sdlc.task_duration",
            "sampleData": "",
            "type": "valueMetric"
          }
        ]
      },
      "processing": {
        "editable": true,
        "processors": [
          {
            "builtin": false,
            "description": "event.status",
            "dqlScript": "parse workflow_job, \"JSON:record_json\" \n| fieldsFlatten record_json, fields:{status} \n| fieldsAdd if(status == \"in_progress\", \"started\", else: if(status == \"completed\", \"finished\", else: status)), alias: event.status\n| fieldsRemove record_json",
            "editable": true,
            "enabled": true,
            "id": "github:job:event.status_4086",
            "matcher": "isNotNull(workflow_job)",
            "sampleData": "",
            "type": "dql"
          },
          {
            "builtin": false,
            "description": "duration",
            "dqlScript": "parse workflow_job, \"JSON:record_json\" \n| fieldsFlatten record_json, fields:{started_at, created_at, status} \n| fieldsAdd if((started_at \u003e created_at) and event.status == \"finished\", toTimestamp(started_at) - toTimestamp(created_at), else: toDuration(0)), alias: duration\n| fieldsRemove record_json, started_at, created_at, status",
            "editable": true,
            "enabled": true,
            "id": "github:job:duration_8891",
            "matcher": "isNotNull(workflow_job)",
            "sampleData": "",
            "type": "dql"
          },
          {
            "builtin": false,
            "description": "start_time",
            "dqlScript": "parse workflow_job, \"JSON:record_json\" \n| fieldsFlatten record_json, fields:{created_at} \n| fieldsAdd start_time = toTimestamp(created_at)\n| fieldsRemove record_json, created_at",
            "editable": true,
            "enabled": true,
            "id": "github:job:start_time_2810",
            "matcher": "isNotNull(workflow_job) and event.status == \"started\"",
            "sampleData": "",
            "type": "dql"
          },
          {
            "builtin": false,
            "description": "end_time",
            "dqlScript": "parse workflow_job, \"JSON:record_json\" \n| fieldsFlatten record_json, fields:{completed_at} \n| fieldsAdd end_time = toTimestamp(completed_at)\n| fieldsRemove record_json, completed_at",
            "editable": true,
            "enabled": true,
            "id": "github:job:end_time_7477",
            "matcher": "isNotNull(workflow_job) and event.status == \"finished\"",
            "sampleData": "",
            "type": "dql"
          },
          {
            "builtin": false,
            "description": "timestamp",
            "dqlScript": "parse workflow_job, \"JSON:record_json\" \n| fieldsFlatten record_json, fields:{updated_at} \n| fieldsAdd dif2h = toLong(7200000000000)\n| fieldsAdd nt = toLong(toTimestamp(now()))\n| fieldsAdd if(nt - toLong(toTimestamp(start_time)) \u003c dif2h, start_time, else: toTimestamp(nt)), alias: st\n| fieldsAdd if(nt - toLong(toTimestamp(end_time)) \u003c dif2h, end_time, else: toTimestamp(nt)), alias: et\n| fieldsAdd if(event.status == \"started\", st, else: if(event.status == \"finished\", et, else: toTimestamp(nt))), alias: timestamp\n| fieldsRemove record_json, updated_at, st, et, nt, dif2h",
            "editable": true,
            "enabled": true,
            "id": "github:job:timestamp_2361",
            "matcher": "isNotNull(workflow_job) ",
            "sampleData": "",
            "type": "dql"
          },
          {
            "builtin": false,
            "description": "cicd.pipeline.run.id",
            "dqlScript": "parse workflow_job, \"JSON:record_json\" \n| fieldsFlatten record_json, fields:{run_id, id, name} \n| fieldsRename cicd.pipeline.run.id = run_id\n| fieldsRemove record_json",
            "editable": true,
            "enabled": true,
            "id": "github:job:pipeline.run.id_task_id_name_4478",
            "matcher": "isNotNull(workflow_job)",
            "sampleData": "",
            "type": "dql"
          },
          {
            "builtin": false,
            "description": "task.id | name",
            "dqlScript": "parse workflow_job, \"JSON:record_json\" \n| fieldsFlatten record_json, fields:{run_id, id, name} \n| fieldsRename task.id = id\n| fieldsRename task.name = name\n| fieldsRemove record_json",
            "editable": true,
            "enabled": true,
            "id": "processor_task.id___name_4623",
            "matcher": "isNotNull(workflow_job) ",
            "sampleData": "",
            "type": "dql"
          },
          {
            "builtin": false,
            "description": "task.run.attempt",
            "dqlScript": "parse workflow_job, \"JSON:record_json\" \n| fieldsFlatten record_json, fields:{run_attempt} \n| fieldsRename task.run.attempt = run_attempt\n| fieldsRemove record_json",
            "editable": true,
            "enabled": true,
            "id": "github:job:ext.task.run.attempt_7991",
            "matcher": "isNotNull(workflow_job) ",
            "sampleData": "",
            "type": "dql"
          },
          {
            "builtin": false,
            "description": "task.steps | labels",
            "dqlScript": "parse workflow_job, \"JSON:record_json\" \n| fieldsFlatten record_json, fields:{steps, labels} \n| fieldsRename task.steps = steps\n| fieldsRename task.labels = labels\n| fieldsRemove record_json",
            "editable": true,
            "enabled": true,
            "id": "github:job:ext.task.steps_labels_6131",
            "matcher": "isNotNull(workflow_job) ",
            "sampleData": "",
            "type": "dql"
          },
          {
            "builtin": false,
            "description": "task.runner.name | group.name",
            "dqlScript": "parse workflow_job, \"JSON:record_json\" \n| fieldsFlatten record_json, fields:{runner_name, runner_group_name} \n| fieldsRename task.runner.name = runner_name\n| fieldsRename task.runner.group.name = runner_group_name\n| fieldsRemove record_json",
            "editable": true,
            "enabled": true,
            "id": "github:job:task.runner.name_group_name_3013",
            "matcher": "isNotNull(workflow_job) ",
            "sampleData": "",
            "type": "dql"
          },
          {
            "builtin": false,
            "description": "task.outcome",
            "dqlScript": "parse workflow_job, \"JSON:record_json\" \n| fieldsFlatten record_json, fields:{conclusion} \n| fieldsRename task.outcome = conclusion\n| fieldsRemove record_json, action",
            "editable": true,
            "enabled": true,
            "id": "github:job:task.outcome_7820",
            "matcher": "isNotNull(workflow_job) and action == \"completed\"",
            "sampleData": "",
            "type": "dql"
          },
          {
            "builtin": false,
            "description": "vcs.ref.head.revision | name",
            "dqlScript": "parse workflow_job, \"JSON:record_json\" \n| fieldsFlatten record_json, fields:{head_branch, head_sha} \n| fieldsRename vcs.ref.head.revision = head_sha\n| fieldsRename vcs.ref.head.name = head_branch\n| fieldsRemove record_json",
            "editable": true,
            "enabled": true,
            "id": "processor_vcs.ref.head.revision_name_5064",
            "matcher": "isNotNull(workflow_job)",
            "sampleData": "",
            "type": "dql"
          },
          {
            "builtin": false,
            "description": "vcs.repository.name | url.full",
            "dqlScript": "parse repository, \"JSON:record_json\" \n| fieldsFlatten record_json, fields:{full_name, html_url} \n| fieldsRename vcs.repository.name = full_name\n| fieldsRename vcs.repository.url.full = html_url\n| fieldsRemove record_json",
            "editable": true,
            "enabled": true,
            "id": "github:job:vcs.repository.name_url_8247",
            "matcher": "isNotNull(repository)",
            "sampleData": "",
            "type": "dql"
          },
          {
            "builtin": false,
            "description": "Cleanup",
            "dqlScript": "fieldsRemove action, workflow_job, repository, organization, sender, installation",
            "editable": true,
            "enabled": true,
            "id": "github:job:remove_fields_7330",
            "matcher": "isNotNull(workflow_job)",
            "sampleData": "",
            "type": "dql"
          }
        ]
      },
      "securityContext": {
        "editable": true,
        "processors": []
      },
      "storage": {
        "catchAllBucketName": "default_events",
        "editable": true,
        "processors": []
      },
      "type": "default"
    },
    {
      "builtin": false,
      "dataExtraction": {
        "editable": true,
        "processors": []
      },
      "displayName": "github-pull-request",
      "editable": true,
      "enabled": true,
      "id": "github:pull_request_8730",
      "metricExtraction": {
        "editable": true,
        "processors": [
          {
            "builtin": false,
            "description": "Number of pull request events",
            "dimensions": [
              "event.type",
              "event.provider",
              "event.status",
              "event.category",
              "vcs.repository.ref.name",
              "cicd.pipeline.name"
            ],
            "editable": true,
            "enabled": true,
            "id": "github:pull-request:number_of_tasks_4441",
            "matcher": "true",
            "metricKey": "events.sdlc.tasks",
            "sampleData": "",
            "type": "counterMetric"
          },
          {
            "builtin": false,
            "description": "Number of merged pull requests",
            "dimensions": [
              "event.type",
              "event.provider",
              "event.status",
              "event.category",
              "vcs.repository.ref.name",
              "cicd.pipeline.name"
            ],
            "editable": true,
            "enabled": true,
            "id": "github:pull-request:number_of_merged_prs_2815",
            "matcher": "event.status == \"finished\"",
            "metricKey": "events.sdlc.finished_tasks",
            "sampleData": "",
            "type": "counterMetric"
          },
          {
            "builtin": false,
            "description": "Duration of merged pull request",
            "dimensions": [
              "event.type",
              "event.provider",
              "event.category",
              "event.status",
              "cicd.pipeline.name",
              "vcs.repository.ref.name"
            ],
            "editable": true,
            "enabled": true,
            "field": "duration",
            "id": "github:pull-request:duration_3902",
            "matcher": "event.status == \"finished\"",
            "metricKey": "events.sdlc.task_duration",
            "sampleData": "",
            "type": "valueMetric"
          }
        ]
      },
      "processing": {
        "editable": true,
        "processors": [
          {
            "builtin": false,
            "description": "event.status",
            "dqlScript": "parse pull_request, \"JSON:record_json\" \n| fieldsFlatten record_json, fields:{merged, state} \n| fieldsAdd if(merged == true, \"finished\", else: if(state == \"closed\", \"finished\", else: \"started\")), alias: event.status\n| fieldsRemove record_json, merged, state",
            "editable": true,
            "enabled": true,
            "id": "github:pull-request:event.status_8886",
            "matcher": "isNotNull(pull_request)",
            "sampleData": "",
            "type": "dql"
          },
          {
            "builtin": false,
            "description": "duration",
            "dqlScript": "parse pull_request, \"JSON:record_json\" \n| fieldsFlatten record_json, fields:{merged_at, created_at} \n| fieldsAdd if((merged_at \u003e created_at) and event.status == \"finished\", toTimestamp(merged_at) - toTimestamp(created_at), else: toDuration(0)), alias: duration\n| fieldsRemove record_json, merged_at, created_at",
            "editable": true,
            "enabled": true,
            "id": "github:pull-request:duration_3699",
            "matcher": "isNotNull(pull_request)",
            "sampleData": "",
            "type": "dql"
          },
          {
            "builtin": false,
            "description": "start_time",
            "dqlScript": "parse pull_request, \"JSON:record_json\" \n| fieldsFlatten record_json, fields:{created_at} \n| fieldsAdd start_time = toTimestamp(created_at)\n| fieldsRemove record_json, created_at",
            "editable": true,
            "enabled": true,
            "id": "github:pull-request:start_time_4242",
            "matcher": "isNotNull(pull_request) \n/*\nand event.status == \"open\"\n/*",
            "sampleData": "",
            "type": "dql"
          },
          {
            "builtin": false,
            "description": "end_time",
            "dqlScript": "parse pull_request, \"JSON:record_json\" \n| fieldsFlatten record_json, fields:{merged_at, closed_at} \n//| fieldsAdd end_time = toTimestamp(merged_at)\n| fieldsAdd if(merged == true, toTimestamp(merged_at), else: toTimestamp(closed_at)), alias: end_time\n| fieldsRemove record_json, merged_at, closed_at",
            "editable": true,
            "enabled": true,
            "id": "github:pull-request:end_time_2015",
            "matcher": "isNotNull(pull_request) and (event.status == \"finished\")",
            "sampleData": "",
            "type": "dql"
          },
          {
            "builtin": false,
            "description": "timestamp",
            "dqlScript": "// 2024-11-24 \n// adjustment od timestamp due to potetial PR events comming after source PR is beeing merged and closed. \n// Additionaly Slawek Z. need precise update time for sorting on dashboards\n// A bug for 7200 sec gap? or something else....Toggle this one off\nparse pull_request, \"JSON:record_json\" \n| fieldsFlatten record_json, fields:{updated_at} \n//| fieldsAdd dif2h = toLong(7200000000000)\n| fieldsAdd nt = toLong(toTimestamp(now()))\n//| fieldsAdd if(nt - toLong(toTimestamp(start_time)) \u003c dif2h, start_time, else: toTimestamp(nt)), alias: st\n//| fieldsAdd if(nt - toLong(toTimestamp(updated_at)) \u003c dif2h, updated_at, else: toTimestamp(nt)), alias: timestamp\n| fieldsAdd toTimestamp(nt), alias: timestamp\n//| fieldsAdd if(nt - toLong(toTimestamp(end_time)) \u003c dif2h, end_time, else: toTimestamp(nt)), alias: et\n//| fieldsAdd if(event.status == \"open\", st, else: if(event.status == \"merged\", et, else: toTimestamp(nt))), alias: timestamp\n//| fieldsRemove st, et, nt, dif2h\n| fieldsRemove nt, dif2h, updated_at",
            "editable": true,
            "enabled": false,
            "id": "github:pull-request:timestamp_8455",
            "matcher": "isNotNull(pull_request) ",
            "sampleData": "",
            "type": "dql"
          },
          {
            "builtin": false,
            "description": "task.id | name",
            "dqlScript": "parse pull_request, \"JSON:record_json\" \n| fieldsFlatten record_json, fields:{id, title} \n| fieldsRename task.id = id\n| fieldsAdd task.title = concat(\"[Change Request]\", \" \", title)\n| fieldsRemove record_json",
            "editable": true,
            "enabled": true,
            "id": "github:pull-request:task.id_name_8340",
            "matcher": "isNotNull(pull_request)",
            "sampleData": "",
            "type": "dql"
          },
          {
            "builtin": false,
            "description": "task.labels",
            "dqlScript": "parse pull_request, \"JSON:record_json\" \n| fieldsFlatten record_json, fields:{labels}\n| fieldsAdd task.labels = toArray(labels)\n| fieldsRemove record_json, labels",
            "editable": true,
            "enabled": true,
            "id": "github:pull-request:task.labels_8497",
            "matcher": "isNotNull(pull_request)",
            "sampleData": "",
            "type": "dql"
          },
          {
            "builtin": false,
            "description": "task.outcome",
            "dqlScript": "parse pull_request, \"JSON:record_json\" \n| fieldsFlatten record_json, fields:{merged} \n| fieldsAdd if(merged == true, \"success\"), alias: task.outcome\n| fieldsRemove record_json, merged, action",
            "editable": true,
            "enabled": true,
            "id": "github:pull-request:task.outcome_6376",
            "matcher": "isNotNull(pull_request) and action == \"closed\"",
            "sampleData": "",
            "type": "dql"
          },
          {
            "builtin": false,
            "description": "vcs.change.id | title | state | url.full",
            "dqlScript": "parse pull_request, \"JSON:record_json\" \n| fieldsFlatten record_json, fields:{title, html_url} \n| fieldsRename vcs.change.id = number\n| fieldsRename vcs.change.title = title\n| fieldsRename vcs.change.state = action\n| fieldsRename vcs.change.url.full = html_url\n| fieldsRemove record_json",
            "editable": true,
            "enabled": true,
            "id": "github:pull-request:vcs.change.id_title_state_4660",
            "matcher": "isNotNull(pull_request)",
            "sampleData": "",
            "type": "dql"
          },
          {
            "builtin": false,
            "description": "vcs.repository.name | url.full",
            "dqlScript": "parse repository, \"JSON:record_json\" \n| fieldsFlatten record_json, fields:{full_name, html_url} \n| fieldsRename vcs.repository.name = full_name\n| fieldsRename vcs.repository.url.full = html_url\n| fieldsRemove record_json",
            "editable": true,
            "enabled": true,
            "id": "github:pull-request:vcs.repository.name_url_9152",
            "matcher": "isNotNull(repository)",
            "sampleData": "",
            "type": "dql"
          },
          {
            "builtin": false,
            "description": "vcs.ref.head.name | revision",
            "dqlScript": "parse pull_request, \"JSON:record_json\" \n| fieldsFlatten record_json, fields:{head}\n| fieldsAdd head[ref], alias: vcs.ref.head.name\n| fieldsAdd head[sha], alias: vcs.ref.head.revision\n| fieldsRemove record_json, head",
            "editable": true,
            "enabled": true,
            "id": "github:pull-request:vcs.ref.head.name_revision_8853",
            "matcher": "isNotNull(pull_request)",
            "sampleData": "",
            "type": "dql"
          },
          {
            "builtin": false,
            "description": "vcs.ref.base.name | revision",
            "dqlScript": "parse pull_request, \"JSON:record_json\" \n| fieldsFlatten record_json, fields:{base}\n| fieldsAdd base[ref], alias: vcs.ref.base.name\n| fieldsAdd base[sha], alias: vcs.ref.base.revision\n| fieldsRemove record_json, base",
            "editable": true,
            "enabled": true,
            "id": "github:pull-request:vcs.ref.base.name_revision_9238",
            "matcher": "isNotNull(pull_request)",
            "sampleData": "",
            "type": "dql"
          },
          {
            "builtin": false,
            "description": "Cleanup",
            "dqlScript": "fieldsRemove action, number, sender, repository",
            "editable": true,
            "enabled": true,
            "id": "github:pull-request:remove_fields_3747",
            "matcher": "isNotNull(pull_request)",
            "sampleData": "",
            "type": "dql"
          }
        ]
      },
      "securityContext": {
        "editable": true,
        "processors": []
      },
      "storage": {
        "catchAllBucketName": "default_events",
        "editable": true,
        "processors": []
      },
      "type": "default"
    },
    {
      "builtin": true,
      "dataExtraction": {
        "editable": false,
        "processors": []
      },
      "displayName": "events.sdlc",
      "editable": false,
      "enabled": true,
      "id": "default",
      "metricExtraction": {
        "editable": false,
        "processors": []
      },
      "processing": {
        "editable": false,
        "processors": []
      },
      "securityContext": {
        "editable": false,
        "processors": []
      },
      "storage": {
        "catchAllBucketName": "default_events",
        "editable": false,
        "processors": []
      },
      "type": "default"
    }
  ],
  "routing": {
    "catchAllPipeline": {
      "editable": false,
      "pipelineId": "default"
    },
    "editable": true,
    "entries": [
      {
        "builtin": false,
        "editable": true,
        "enabled": true,
        "matcher": "isNotNull(workflow_run)",
        "note": "Route events to workflow pipeline",
        "pipelineId": "github:workflow_6504"
      },
      {
        "builtin": false,
        "editable": true,
        "enabled": true,
        "matcher": "isNotNull(workflow_job)",
        "note": "Route events to job pipeline",
        "pipelineId": "github:job_9528"
      },
      {
        "builtin": false,
        "editable": true,
        "enabled": true,
        "matcher": "isNotNull(pull_request)",
        "note": "Route events to PR pipeline ",
        "pipelineId": "github:pull_request_8730"
      }
    ]
  }
}