{
  "title": "{{ .name }}",
  "description": "{{ .wf_description }}",
  "isPrivate": "{{ .wf_isPrivate }}",
  "triggerType": "Event",
  "trigger": {
    "eventTrigger": {
      "filterQuery": "event.type == \"guardian.validation.triggered\" \n AND tag.service==\"{{ .tag_service }}\" AND tag.stage==\"{{ .tag_stage }}\"",
      "isActive": true,
      "triggerConfiguration": {
        "type": "event",
        "value": {
          "eventType": "bizevents",
          "query": "event.type == \"guardian.validation.triggered\" \n AND tag.service==\"{{ .tag_service }}\" AND tag.stage==\"{{ .tag_stage }}\""
        }
      },
      "uniqueExpression": null
    }
  },
  "tasks": {
    "performance": {
      "name": "performance",
      "description": "Performance Efficiency Validation",
      "action": "dynatrace.site.reliability.guardian:validate-guardian-action",
      "input": {
        "objectId": "{{ .srg_perf_id }}",
        "executionId": "{{`{{`}} execution().id {{`}}`}}",
        "expressionTo": "{{`{{`}} event()['timeframe.to'] {{`}}`}}",
        "expressionFrom": "{{`{{`}} event()['timeframe.from'] {{`}}`}}",
        "timeframeSelector": {
          "to": "now",
          "from": "now-30m"
        },
        "timeframeInputType": "expression"
      },
      "position": {
        "x": 0,
        "y": 1
      },
      "predecessors": []
    },
    "perf_fail_slack_notification": {
      "name": "perf_fail_slack_notification",
      "description": "Send a  Slack message to the Performance Assurance team",
      "action": "dynatrace.slack:slack-send-message",
      "active": true,
      "input": {
        "channel": "{{ .slack_perf_channel }}",
        "message": "performance issue occured in the release!",
        "reaction": [
          "eyes"
        ],
        "connection": null,
        "workflowID": "{{`{{`}} execution().workflow.id {{`}}`}}",
        "channelType": "id",
        "executionID": "{{`{{`}} execution().id {{`}}`}}",
        "executionDate": "{{`{{`}} execution().started_at {{`}}`}}",
        "appendToThread": false,
        "selectedRequestType": 0,
        "attachmentToggleValue": "none"
      },
      "position": {
        "x": -1,
        "y": 2
      },
      "predecessors": [
        "performance"
      ],
      "conditions": {
        "states": {
          "performance": "OK"
        },
        "custom": "{{`{{`}} result('performance').validation_status in [\"fail\",\"error\"] {{`}}`}}"
      }
    },
    "cost": {
      "name": "cost",
      "description": "Cost Optimization",
      "action": "dynatrace.site.reliability.guardian:validate-guardian-action",
      "input": {
        "objectId": "{{ .srg_cost_id }}",
        "executionId": "{{`{{`}} execution().id {{`}}`}}",
        "expressionTo": "{{`{{`}} event()['timeframe.to'] {{`}}`}}",
        "expressionFrom": "{{`{{`}} event()['timeframe.from'] {{`}}`}}",
        "timeframeSelector": {
          "to": "now",
          "from": "now-30m"
        },
        "timeframeInputType": "expression"
      },
      "position": {
        "x": 0,
        "y": 2
      },
      "predecessors": [
        "performance"
      ],
      "conditions": {
        "states": {
          "performance": "OK"
        },
        "custom": ""
      }
    },
    "cost_fail_send_email": {
      "name": "cost_fail_send_email",
      "description": "Send email to Project Management team",
      "action": "dynatrace.email:send-email",
      "active": true,
      "input": {},
      "position": {
        "x": -1,
        "y": 3
      },
      "predecessors": [
        "cost"
      ],
      "conditions": {
        "states": {
          "cost": "OK"
        },
        "custom": "{{`{{`}} result('cost').validation_status in [\"fail\",\"error\"] {{`}}`}}"
      }
    },
    "reliability": {
      "name": "reliability",
      "description": "Reliability Validation",
      "action": "dynatrace.site.reliability.guardian:validate-guardian-action",
      "input": {
        "objectId": "{{ .srg_reliability_id }}",
        "executionId": "{{`{{`}} execution().id {{`}}`}}",
        "expressionTo": "{{`{{`}} event()['timeframe.to'] {{`}}`}}",
        "expressionFrom": "{{`{{`}} event()['timeframe.from'] {{`}}`}}",
        "timeframeSelector": {
          "to": "now",
          "from": "now-30m"
        },
        "timeframeInputType": "expression"
      },
      "position": {
        "x": 0,
        "y": 3
      },
      "predecessors": [
        "cost"
      ],
      "conditions": {
        "states": {
          "cost": "OK"
        },
        "custom": ""
      }
    },
    "reliability_fail_jira_ticket": {
      "name": "reliability_fail_jira_ticket",
      "action": "dynatrace.jira:jira-create-issue",
      "description": "Create new Jira issue with various fields",
      "input": {},
      "active": true,
      "position": {
        "x": -1,
        "y": 4
      },
      "predecessors": [
        "reliability"
      ],
      "conditions": {
        "states": {
          "reliability": "OK"
        },
        "custom": "{{`{{`}} result('reliability').validation_status in [\"fail\",\"error\"] {{`}}`}}"
      }
    },
    "sustainability": {
      "name": "sustainability",
      "description": "Sustainability Validation",
      "action": "dynatrace.site.reliability.guardian:validate-guardian-action",
      "input": {
        "objectId": "{{ .srg_sustainability_id }}",
        "executionId": "{{`{{`}} execution().id {{`}}`}}",
        "expressionTo": "{{`{{`}} event()['timeframe.to'] {{`}}`}}",
        "expressionFrom": "{{`{{`}} event()['timeframe.from'] {{`}}`}}",
        "timeframeSelector": {
          "to": "now",
          "from": "now-30m"
        },
        "timeframeInputType": "expression"
      },
      "position": {
        "x": 0,
        "y": 4
      },
      "predecessors": [
        "reliability"
      ],
      "conditions": {
        "states": {
          "reliability": "OK"
        },
        "custom": ""
      }
    },
    "sust_fail_pod_mem_alloc_optimize": {
      "name": "sust_fail_pod_mem_alloc_optimize",
      "action": "dynatrace.kubernetes.control:apply",
      "description": "Apply kubernetes yaml configurations for less resource usage",
      "input": {
        "resource": "simplenodeservice",
        "namespace": "simplenodeservice-staging",
        "connection": ""
      },
      "position": {
        "x": -1,
        "y": 5
      },
      "predecessors": [
        "sustainability"
      ],
      "conditions": {
        "states": {
          "sustainability": "OK"
        },
        "custom": "{{`{{`}} result('sustainability').validation_status in [\"fail\",\"error\"] {{`}}`}}"
      }
    },
    "wait_for_security_apdex_data_available_in_grail": {
      "name": "wait_for_security_apdex_data_available_in_grail",
      "description": "Build a custom task running js Code",
      "action": "dynatrace.automations:run-javascript",
      "input": {
        "script": "import { executionsClient, actionExecutionsClient  } from '@dynatrace-sdk/client-automation';\nconst MAX_DURATION_MS = 900000;\nconst LONG_WAIT_MS = 60000;\nconst SHORT_WAIT_MS = 10;\n\nexport default async function ({ execution_id, action_execution_id  }) {\n  \n  const ex = await executionsClient.getExecution({ id: execution_id });\n  \n  var timeframeFrom  = new Date(ex.params.event['timeframe.from']);\n  var currentDate = new Date();\n  var timePassedUntilNow = currentDate - timeframeFrom;\n\n  var calculatedWaitTime = MAX_DURATION_MS - timePassedUntilNow;\n  if (calculatedWaitTime <=0) return; \n  \n  const loopNumToStop = Math.ceil(parseFloat(calculatedWaitTime / 60000 ));\n\n  const actionEx = await actionExecutionsClient.getActionExecution({ id: action_execution_id });\n  const loopNum = parseInt(actionEx.loopItem.item);\n\n  if (loopNum <= loopNumToStop) {\n    console.log('Time passed until now for the event to be validated: '\n                + timePassedUntilNow + ' ms = ' + timePassedUntilNow / 60000 + ' minutes. '\n                + 'The wait will end at the loop number ' + loopNumToStop); \n\n    console.log(LONG_WAIT_MS/1000 + ' sec wait for the loop ' + loopNum);\n    return await new Promise((res) => setTimeout(res, LONG_WAIT_MS));\n  } else {\n    console.log(SHORT_WAIT_MS + ' ms wait for the loop ' + loopNum);\n    return await new Promise((res) => setTimeout(res, SHORT_WAIT_MS));\n  }\n  \n}"
      },
      "position": {
        "x": 0,
        "y": 5
      },
      "predecessors": ["sustainability"],
      "conditions": {
        "states": {
          "sustainability": "OK"
        }
      },
      "timeout": 3000,
      "concurrency": 1,
      "withItems": "item in [1, 2, 3,4,5,6,7,8,9,10,11,12,13,14,15]"
    },
    "security": {
      "name": "security",
      "description": "Security Vulnerability Validation",
      "action": "dynatrace.site.reliability.guardian:validate-guardian-action",
      "input": {
        "objectId": "{{ .srg_security_id }}",
        "executionId": "{{`{{`}} execution().id {{`}}`}}",
        "expressionTo": "",
        "expressionFrom": "",
        "timeframeSelector": {
          "to": "now",
          "from": "now-15m"
        },
        "timeframeInputType": "timeframeSelector"
      },
      "position": {
        "x": 0,
        "y": 6
      },
      "predecessors": [
        "wait_for_security_apdex_data_available_in_grail"
      ],
      "conditions": {
        "states": {
          "wait_for_security_apdex_data_available_in_grail": "OK"
        },
        "custom": "",
        "else": "STOP"
      },
      "retry": {
        "count": 2,
        "delay": 30,
        "failedLoopIterationsOnly": true
      },
      "timeout": 900
    },
    "security_fail_servicenow_issue": {
      "name": "security_fail_servicenow_issue",
      "action": "dynatrace.servicenow:snow-create-incident",
      "description": "Create an incident in ServiceNow for Security team",
      "input": {
        "caller": "",
        "impact": "3",
        "urgency": "3",
        "category": "inquiry",
        "description": "Event details: {{`{{`}} event() {{`}}`}}",
        "subCategory": "internal application",
        "connectionId": "",
        "correlationId": "DT_{{`{{`}} event()[\"event.id\"] {{`}}`}}",
        "shortDescription": "{{`{{`}} event()[\"event.category\"] {{`}}`}} {{`{{`}} event()[\"event.name\"] {{`}}`}}"
      },
      "active": true,
      "position": {
        "x": -1,
        "y": 7
      },
      "predecessors": [
        "security"
      ],
      "conditions": {
        "states": {
          "security": "OK"
        },
        "custom": "{{`{{`}} result('security').validation_status in [\"fail\",\"error\"] {{`}}`}}"
      }
    },
    "operational_excellence": {
      "name": "operational_excellence",
      "description": "Operational Excellence Validation",
      "action": "dynatrace.site.reliability.guardian:validate-guardian-action",
      "input": {
        "objectId": "{{ .srg_opr_excel_id }}",
        "executionId": "{{`{{`}} execution().id {{`}}`}}",
        "expressionTo": "",
        "expressionFrom": "",
        "timeframeSelector": {
          "to": "now",
          "from": "now-15m"
        },
        "timeframeInputType": "timeframeSelector"
      },
      "position": {
        "x": 0,
        "y": 7
      },
      "predecessors": [
        "security"
      ],
      "conditions": {
        "states": {
          "security": "OK"
        },
        "custom": "",
        "else": "STOP"
      },
      "retry": {
        "count": 2,
        "delay": 30,
        "failedLoopIterationsOnly": true
      },
      "timeout": 900
    },
    "opr_excel_fail_ansible_job": {
      "name": "opr_excel_fail_ansible_job",
      "action": "dynatrace.redhat.ansible:launch-job-template",
      "description": "Launch a job template in Red Hat Ansible Automation Controller",
      "input": {},
      "active": true,
      "position": {
        "x": -1,
        "y": 8
      },
      "predecessors": [
        "operational_excellence"
      ],
      "conditions": {
        "states": {
          "operational_excellence": "OK"
        },
        "custom": "{{`{{`}} result('operational_excellence').validation_status in [\"fail\",\"error\"] {{`}}`}}"
      }
    }

  }
<<<<<<< HEAD
}
=======
}
>>>>>>> c74f9b1 (jsons)
